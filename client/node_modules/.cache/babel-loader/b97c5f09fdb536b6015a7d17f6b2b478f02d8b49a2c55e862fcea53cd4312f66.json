{"ast":null,"code":"var _jsxFileName = \"/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapContainer = ({\n  locationCoordinates,\n  device_values\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null); // Ref to store the map instance\n  const [legendItems, setLegendItems] = useState([]);\n\n  // Handle scroll behavior\n  const scrollerRef = useRef(null);\n  useEffect(() => {\n    const handleWheel = event => {\n      event.preventDefault();\n      if (scrollerRef.current) {\n        scrollerRef.current.scrollLeft += event.deltaY;\n      }\n    };\n    const scroller = scrollerRef.current;\n    if (scroller) {\n      scroller.addEventListener(\"wheel\", handleWheel, {\n        passive: false\n      });\n    }\n    return () => {\n      if (scroller) {\n        scroller.removeEventListener(\"wheel\", handleWheel);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    // Destroy existing map instance if it exists\n    if (mapInstance.current) {\n      mapInstance.current.remove();\n    }\n    if (mapRef.current) {\n      // Initialize the map\n      mapInstance.current = L.map(mapRef.current).setView([16.22525, 74.8424], 16);\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        maxZoom: 29,\n        minZoom: 2\n      }).addTo(mapInstance.current);\n      const colorMap = {\n        farmland: \"green\",\n        valve: \"orange\",\n        moisture: \"darkblue\",\n        npk: \"red\"\n      };\n      const uniqueTypes = new Set();\n\n      // Plot farmland coordinates\n      const farmlandCoordinates = locationCoordinates.farm_coordinates.map(coord => {\n        const [lat, lon] = coord.split(\",\");\n        return [parseFloat(lat), parseFloat(lon)];\n      });\n      const farmlandLayer = L.polygon(farmlandCoordinates, {\n        color: colorMap.farmland\n      }).addTo(mapInstance.current);\n      farmlandLayer.bindPopup(\"Farmland Area\");\n\n      // Create a map for moisture values\n      const moistureValuesMap = new Map();\n      device_values.moisture_device_value.forEach(({\n        section_device_id,\n        moisture_value\n      }) => {\n        moistureValuesMap.set(section_device_id, moisture_value);\n      });\n\n      // Plot section devices with moisture values\n      locationCoordinates.section_device.forEach(device => {\n        const [lat, lon] = device.device_location.split(\",\").map(Number);\n        uniqueTypes.add(device.device_name);\n        if (device.device_name === \"moisture\") {\n          const moistureValue = moistureValuesMap.get(device.section_device_id) || 0;\n          const moistureRadius = moistureValue * 0.5; // Adjust scaling factor as needed\n\n          L.circle([lat, lon], {\n            radius: moistureRadius,\n            fillColor: colorMap.moisture,\n            color: colorMap.moisture,\n            fillOpacity: 0.4,\n            weight: 1\n          }).addTo(mapInstance.current).bindPopup(`Moisture Sensor in ${device.section_name}<br/>Value: ${moistureValue}`);\n        } else if (device.device_name === \"valve\") {\n          const valveStatus = device_values.valve_devices_data.find(v => v.section_device_id === device.section_device_id);\n          const valveColor = (valveStatus === null || valveStatus === void 0 ? void 0 : valveStatus.valve_status) === \"on\" ? \"green\" : \"red\";\n          L.circleMarker([lat, lon], {\n            radius: 8,\n            fillColor: valveColor,\n            color: valveColor,\n            fillOpacity: 0.6,\n            weight: 2\n          }).addTo(mapInstance.current).bindPopup(`Valve in ${device.section_name}`);\n        }\n      });\n\n      // Plot NPK devices\n      locationCoordinates.farm_device.forEach(device => {\n        const [lat, lon] = device.device_location.split(\",\").map(Number);\n        L.circleMarker([lat, lon], {\n          radius: 5,\n          fillColor: colorMap.npk,\n          color: colorMap.npk,\n          fillOpacity: 1,\n          stroke: false\n        }).addTo(mapInstance.current).bindPopup(`NPK Device: ${device.device_name}`);\n      });\n\n      // Generate legend items\n      const legendData = Array.from(uniqueTypes).map(type => ({\n        type,\n        color: colorMap[type] || \"gray\"\n      }));\n      setLegendItems(legendData);\n\n      // Fit the map to the farmland bounds\n      const bounds = L.latLngBounds(farmlandCoordinates);\n      mapInstance.current.fitBounds(bounds);\n    }\n  }, [locationCoordinates, device_values]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: scrollerRef,\n    className: \"borderring p-0\",\n    style: {\n      overflow: \"hidden\",\n      scrollbarWidth: \"none\",\n      msOverflowStyle: \"none\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"borderring\",\n      style: {\n        position: \"relative\",\n        border: 'none'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"text-secondary\",\n        style: {\n          zIndex: 2,\n          position: \"relative\",\n          top: '0px',\n          left: '0px'\n        },\n        children: \"Field Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mapRef,\n        style: {\n          width: \"100%\",\n          height: \"445px\",\n          scale: \"1.45\",\n          overflow: \"hidden\",\n          position: \"relative\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: \"10px\",\n          right: \"10px\",\n          backgroundColor: \"white\",\n          padding: \"6px\",\n          borderRadius: \"5px\",\n          boxShadow: \"0 0 5px rgba(0,0,0,0.5)\",\n          zIndex: 10\n        },\n        children: legendItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"10px\",\n              height: \"10px\",\n              backgroundColor: item.color,\n              marginRight: \"5px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: '13px'\n            },\n            children: item.type.charAt(0).toUpperCase() + item.type.slice(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 29\n          }, this)]\n        }, item.type, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n};\n_s(MapContainer, \"X3Fs5Fc15gsk24cNNeYsIIz4aHo=\");\n_c = MapContainer;\nexport default MapContainer;\nvar _c;\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","jsxDEV","_jsxDEV","MapContainer","locationCoordinates","device_values","_s","mapRef","mapInstance","legendItems","setLegendItems","scrollerRef","handleWheel","event","preventDefault","current","scrollLeft","deltaY","scroller","addEventListener","passive","removeEventListener","remove","map","setView","tileLayer","maxZoom","minZoom","addTo","colorMap","farmland","valve","moisture","npk","uniqueTypes","Set","farmlandCoordinates","farm_coordinates","coord","lat","lon","split","parseFloat","farmlandLayer","polygon","color","bindPopup","moistureValuesMap","Map","moisture_device_value","forEach","section_device_id","moisture_value","set","section_device","device","device_location","Number","add","device_name","moistureValue","get","moistureRadius","circle","radius","fillColor","fillOpacity","weight","section_name","valveStatus","valve_devices_data","find","v","valveColor","valve_status","circleMarker","farm_device","stroke","legendData","Array","from","type","bounds","latLngBounds","fitBounds","ref","className","style","overflow","scrollbarWidth","msOverflowStyle","children","position","border","zIndex","top","left","fileName","_jsxFileName","lineNumber","columnNumber","width","height","scale","right","backgroundColor","padding","borderRadius","boxShadow","item","display","alignItems","marginRight","fontSize","charAt","toUpperCase","slice","_c","$RefreshReg$"],"sources":["/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport 'leaflet/dist/leaflet.css';\n\nconst MapContainer = ({ locationCoordinates, device_values }) => {\n    const mapRef = useRef(null);\n    const mapInstance = useRef(null);  // Ref to store the map instance\n    const [legendItems, setLegendItems] = useState([]);\n\n    // Handle scroll behavior\n    const scrollerRef = useRef(null);\n\n    useEffect(() => {\n        const handleWheel = (event) => {\n            event.preventDefault();\n            if (scrollerRef.current) {\n                scrollerRef.current.scrollLeft += event.deltaY;\n            }\n        };\n\n        const scroller = scrollerRef.current;\n        if (scroller) {\n            scroller.addEventListener(\"wheel\", handleWheel, { passive: false });\n        }\n\n        return () => {\n            if (scroller) {\n                scroller.removeEventListener(\"wheel\", handleWheel);\n            }\n        };\n    }, []);\n\n    useEffect(() => {\n        // Destroy existing map instance if it exists\n        if (mapInstance.current) {\n            mapInstance.current.remove();\n        }\n    \n        if (mapRef.current) {\n            // Initialize the map\n            mapInstance.current = L.map(mapRef.current).setView([16.22525, 74.8424], 16);\n    \n            L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n                maxZoom: 29,\n                minZoom: 2,\n            }).addTo(mapInstance.current);\n    \n            const colorMap = {\n                farmland: \"green\",\n                valve: \"orange\",\n                moisture: \"darkblue\",\n                npk: \"red\",\n            };\n    \n            const uniqueTypes = new Set();\n    \n            // Plot farmland coordinates\n            const farmlandCoordinates = locationCoordinates.farm_coordinates.map(coord => {\n                const [lat, lon] = coord.split(\",\");\n                return [parseFloat(lat), parseFloat(lon)];\n            });\n    \n            const farmlandLayer = L.polygon(farmlandCoordinates, { color: colorMap.farmland }).addTo(mapInstance.current);\n            farmlandLayer.bindPopup(\"Farmland Area\");\n    \n            // Create a map for moisture values\n            const moistureValuesMap = new Map();\n            device_values.moisture_device_value.forEach(({ section_device_id, moisture_value }) => {\n                moistureValuesMap.set(section_device_id, moisture_value);\n            });\n    \n            // Plot section devices with moisture values\n            locationCoordinates.section_device.forEach(device => {\n                const [lat, lon] = device.device_location.split(\",\").map(Number);\n                uniqueTypes.add(device.device_name);\n    \n                if (device.device_name === \"moisture\") {\n                    const moistureValue = moistureValuesMap.get(device.section_device_id) || 0;\n                    const moistureRadius = moistureValue * 0.5; // Adjust scaling factor as needed\n    \n                    L.circle([lat, lon], {\n                        radius: moistureRadius,\n                        fillColor: colorMap.moisture,\n                        color: colorMap.moisture,\n                        fillOpacity: 0.4,\n                        weight: 1,\n                    }).addTo(mapInstance.current).bindPopup(`Moisture Sensor in ${device.section_name}<br/>Value: ${moistureValue}`);\n                } else if (device.device_name === \"valve\") {\n                    const valveStatus = device_values.valve_devices_data.find(v => v.section_device_id === device.section_device_id);\n                    const valveColor = valveStatus?.valve_status === \"on\" ? \"green\" : \"red\";\n    \n                    L.circleMarker([lat, lon], {\n                        radius: 8,\n                        fillColor: valveColor,\n                        color: valveColor,\n                        fillOpacity: 0.6,\n                        weight: 2,\n                    }).addTo(mapInstance.current).bindPopup(`Valve in ${device.section_name}`);\n                }\n            });\n    \n            // Plot NPK devices\n            locationCoordinates.farm_device.forEach(device => {\n                const [lat, lon] = device.device_location.split(\",\").map(Number);\n                L.circleMarker([lat, lon], {\n                    radius: 5,\n                    fillColor: colorMap.npk,\n                    color: colorMap.npk,\n                    fillOpacity: 1,\n                    stroke: false,\n                }).addTo(mapInstance.current).bindPopup(`NPK Device: ${device.device_name}`);\n            });\n    \n            // Generate legend items\n            const legendData = Array.from(uniqueTypes).map(type => ({\n                type,\n                color: colorMap[type] || \"gray\",\n            }));\n    \n            setLegendItems(legendData);\n    \n            // Fit the map to the farmland bounds\n            const bounds = L.latLngBounds(farmlandCoordinates);\n            mapInstance.current.fitBounds(bounds);\n        }\n    }, [locationCoordinates, device_values]);\n    \n\n    return (\n        <div ref={scrollerRef} className=\"borderring p-0\" style={{ overflow: \"hidden\", scrollbarWidth: \"none\", msOverflowStyle: \"none\" }}>\n            <div className=\"borderring\" style={{ position: \"relative\", border: 'none' }}>\n                <h6 className=\"text-secondary\" style={{ zIndex: 2, position: \"relative\", top: '0px', left: '0px' }}>Field Overview</h6>\n                <div\n                    ref={mapRef}\n                    style={{\n                        width: \"100%\",\n                        height: \"445px\",\n                        scale: \"1.45\",\n                        overflow: \"hidden\",\n                        position: \"relative\"\n                    }}\n                >\n                </div>\n\n                {/* Dynamic Legend */}\n                <div style={{\n                    position: \"absolute\",\n                    top: \"10px\",\n                    right: \"10px\",\n                    backgroundColor: \"white\",\n                    padding: \"6px\",\n                    borderRadius: \"5px\",\n                    boxShadow: \"0 0 5px rgba(0,0,0,0.5)\",\n                    zIndex: 10,\n                }}>\n                    {legendItems.map((item) => (\n                        <div key={item.type} style={{ display: \"flex\", alignItems: \"center\" }}>\n                            <div style={{ width: \"10px\", height: \"10px\", backgroundColor: item.color, marginRight: \"5px\" }}></div>\n                            <span style={{fontSize:'13px'}}>{item.type.charAt(0).toUpperCase() + item.type.slice(1)}</span>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default MapContainer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}