{"ast":null,"code":"var _jsxFileName = \"/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport 'leaflet/dist/leaflet.css';\nimport campass from './WeatherImages/campass.png';\nimport Modal from \"./Modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapContainer = ({\n  collected_data\n}) => {\n  _s();\n  const locationCoordinates = collected_data === null || collected_data === void 0 ? void 0 : collected_data.location_coordinates;\n  const device_values = collected_data === null || collected_data === void 0 ? void 0 : collected_data.device_values;\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  const [legendItems, setLegendItems] = useState([]);\n  const scrollerRef = useRef(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [chartData, setChartData] = useState(null);\n  const [chartType, setChartType] = useState('line'); // Horizontal scrolling for the map container useEffect(() => { const handleWheel = (event) => { event.preventDefault(); if (scrollerRef.current) { scrollerRef.current.scrollLeft += event.deltaY; } }; const scroller = scrollerRef.current; if (scroller) { scroller.addEventListener(\"wheel\", handleWheel, { passive: false }); } return () => { if (scroller) { scroller.removeEventListener(\"wheel\", handleWheel); } }; }, []); // Initialize the map and markers useEffect(() => { if (!locationCoordinates || !device_values || !mapRef.current) return; if (mapInstance.current) { mapInstance.current.remove(); } mapInstance.current = L.map(mapRef.current); L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", { maxZoom: 27, minZoom: 2, }).addTo(mapInstance.current); const colorMap = { farmland: \"green\", valve: \"red\", moisture: \"blue\", npk: \"orange\", }; const farmlandCoordinates = locationCoordinates.farm_coordinates?.map(coord => { const [lat, lon] = coord.split(\",\").map(Number); return [lat, lon]; }) || []; if (farmlandCoordinates.length > 0) { const farmlandLayer = L.polygon(farmlandCoordinates, { color: colorMap.farmland }).addTo(mapInstance.current); farmlandLayer.bindPopup(\"Farmland Area\"); mapInstance.current.fitBounds(farmlandLayer.getBounds()); // Adjust the map view to the farm coordinates } const moistureValuesMap = new Map(); device_values?.moisture_device_value?.forEach(({ section_device_id, moisture_value }) => { moistureValuesMap.set(section_device_id, moisture_value); }); locationCoordinates.section_device?.forEach(device => { const [lat, lon] = device.device_location?.split(\",\").map(Number) || []; if (lat && lon && isWithinBounds([lat, lon], farmlandCoordinates)) { if (device.device_name === \"moisture\") { const moistureValue = moistureValuesMap.get(device.section_device_id) || 0; const moistureRadius = moistureValue * 0.24; const moistureCircle = L.circle([lat, lon], { radius: moistureRadius, fillColor: colorMap.moisture, color: colorMap.moisture, fillOpacity: 0.4, weight: 1, }) .bindPopup(`Moisture Sensor in ${device.section_name}<br/>Value: ${moistureValue}`) .on(\"click\", () => handleMoistureSensorClick(device.section_device_id)); moistureCircle.addTo(mapInstance.current); L.circleMarker([lat, lon], { radius: 5, fillColor: colorMap.moisture, color: colorMap.moisture, fillOpacity: 1, weight: 2, }) .bindPopup(`Moisture Sensor in ${device.section_name}`) .addTo(mapInstance.current); } if (device.device_name === \"valve\") { L.circleMarker([lat, lon], { radius: 8, fillColor: colorMap.valve, color: colorMap.valve, fillOpacity: 0.8, weight: 2, }) .bindPopup(`Valve in ${device.section_name}`) .on(\"click\", () => handleValveClick(device.section_device_id)) .addTo(mapInstance.current); } if (device.device_name === \"npk\") { L.circleMarker([lat, lon], { radius: 8, fillColor: colorMap.npk, color: colorMap.npk, fillOpacity: 0.8, weight: 2, }) .bindPopup(`NPK Sensor in ${device.section_name}`) .addTo(mapInstance.current); } } }); const legendData = [ { type: \"moisture\", color: colorMap.moisture }, { type: \"valve\", color: colorMap.valve }, { type: \"npk\", color: colorMap.npk }, ]; setLegendItems(legendData); }, [locationCoordinates, device_values]); const isWithinBounds = (coordinates, farmlandCoordinates) => { const polygon = L.polygon(farmlandCoordinates); return polygon.getBounds().contains(coordinates); }; const handleMoistureSensorClick = async (sensorId) => { try { const response = await fetch(`/farmer/farm/moisture/${sensorId}`); const data = await response.json(); if (data.length === 0) { console.error(\"No data available for the selected sensor\"); return; } const labels = data.map(item => new Date(item.timestamp).toLocaleString()); const values = data.map(item => item.moisture_value); setChartData({ labels, values }); setChartType('line'); setIsModalOpen(true); } catch (error) { console.error(\"Error fetching moisture data:\", error); } }; const handleValveClick = async (valveId) => { try { const response = await fetch(`/farmer/farm/valve/${valveId}`); const data = await response.json(); const labels = data.map(item => new Date(item.timestamp).toLocaleString()); const values = data.map(item => item.valve_status?.trim()); setChartData({ labels, values }); setChartType('timeline'); setIsModalOpen(true); } catch (error) { console.error(\"Error fetching valve data:\", error); } }; const handleCloseModal = () => { setIsModalOpen(false); setChartData\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: scrollerRef,\n    className: \"borderring p-0\",\n    style: {\n      overflow: \"hidden\",\n      scrollbarWidth: \"none\",\n      msOverflowStyle: \"none\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"borderring\",\n      style: {\n        position: \"relative\",\n        border: 'none'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"text-secondary\",\n        style: {\n          zIndex: 2,\n          position: \"relative\",\n          top: '0px',\n          left: '0px'\n        },\n        children: \"Field Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 5,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mapRef,\n        style: {\n          width: \"100%\",\n          height: \"445px\",\n          scale: \"1.45\",\n          overflow: \"hidden\",\n          position: \"relative\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 6,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: \"10px\",\n          right: \"10px\",\n          backgroundColor: \"white\",\n          padding: \"6px\",\n          borderRadius: \"5px\",\n          boxShadow: \"0 0 5px rgba(0,0,0,0.5)\",\n          zIndex: 10\n        },\n        children: [legendItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"10px\",\n              height: \"10px\",\n              backgroundColor: item.color,\n              marginRight: \"5px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: '13px'\n            },\n            children: item.type.charAt(0).toUpperCase() + item.type.slice(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 29\n          }, this)]\n        }, item.type, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: campass,\n          width: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '13px'\n          },\n          children: \"Campass\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 54\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), isModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n        show: isModalOpen,\n        handleClose: handleCloseModal,\n        chartData: chartData,\n        chartType: chartType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 3,\n    columnNumber: 9\n  }, this);\n};\n_s(MapContainer, \"nHztED6hian/U0wFos2f9rWCxWc=\");\n_c = MapContainer;\nexport default MapContainer;\nvar _c;\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","campass","Modal","jsxDEV","_jsxDEV","MapContainer","collected_data","_s","locationCoordinates","location_coordinates","device_values","mapRef","mapInstance","legendItems","setLegendItems","scrollerRef","isModalOpen","setIsModalOpen","chartData","setChartData","chartType","setChartType","ref","className","style","overflow","scrollbarWidth","msOverflowStyle","children","position","border","zIndex","top","left","fileName","_jsxFileName","lineNumber","columnNumber","width","height","scale","right","backgroundColor","padding","borderRadius","boxShadow","map","item","display","alignItems","color","marginRight","fontSize","type","charAt","toUpperCase","slice","src","show","handleClose","handleCloseModal","_c","$RefreshReg$"],"sources":["/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\"; import L from \"leaflet\"; import 'leaflet/dist/leaflet.css'; import campass from './WeatherImages/campass.png'; import Modal from \"./Modal\"; const MapContainer = ({ collected_data }) => { const locationCoordinates = collected_data?.location_coordinates; const device_values = collected_data?.device_values; const mapRef = useRef(null); const mapInstance = useRef(null); const [legendItems, setLegendItems] = useState([]); const scrollerRef = useRef(null); const [isModalOpen, setIsModalOpen] = useState(false); const [chartData, setChartData] = useState(null); const [chartType, setChartType] = useState('line'); // Horizontal scrolling for the map container useEffect(() => { const handleWheel = (event) => { event.preventDefault(); if (scrollerRef.current) { scrollerRef.current.scrollLeft += event.deltaY; } }; const scroller = scrollerRef.current; if (scroller) { scroller.addEventListener(\"wheel\", handleWheel, { passive: false }); } return () => { if (scroller) { scroller.removeEventListener(\"wheel\", handleWheel); } }; }, []); // Initialize the map and markers useEffect(() => { if (!locationCoordinates || !device_values || !mapRef.current) return; if (mapInstance.current) { mapInstance.current.remove(); } mapInstance.current = L.map(mapRef.current); L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", { maxZoom: 27, minZoom: 2, }).addTo(mapInstance.current); const colorMap = { farmland: \"green\", valve: \"red\", moisture: \"blue\", npk: \"orange\", }; const farmlandCoordinates = locationCoordinates.farm_coordinates?.map(coord => { const [lat, lon] = coord.split(\",\").map(Number); return [lat, lon]; }) || []; if (farmlandCoordinates.length > 0) { const farmlandLayer = L.polygon(farmlandCoordinates, { color: colorMap.farmland }).addTo(mapInstance.current); farmlandLayer.bindPopup(\"Farmland Area\"); mapInstance.current.fitBounds(farmlandLayer.getBounds()); // Adjust the map view to the farm coordinates } const moistureValuesMap = new Map(); device_values?.moisture_device_value?.forEach(({ section_device_id, moisture_value }) => { moistureValuesMap.set(section_device_id, moisture_value); }); locationCoordinates.section_device?.forEach(device => { const [lat, lon] = device.device_location?.split(\",\").map(Number) || []; if (lat && lon && isWithinBounds([lat, lon], farmlandCoordinates)) { if (device.device_name === \"moisture\") { const moistureValue = moistureValuesMap.get(device.section_device_id) || 0; const moistureRadius = moistureValue * 0.24; const moistureCircle = L.circle([lat, lon], { radius: moistureRadius, fillColor: colorMap.moisture, color: colorMap.moisture, fillOpacity: 0.4, weight: 1, }) .bindPopup(`Moisture Sensor in ${device.section_name}<br/>Value: ${moistureValue}`) .on(\"click\", () => handleMoistureSensorClick(device.section_device_id)); moistureCircle.addTo(mapInstance.current); L.circleMarker([lat, lon], { radius: 5, fillColor: colorMap.moisture, color: colorMap.moisture, fillOpacity: 1, weight: 2, }) .bindPopup(`Moisture Sensor in ${device.section_name}`) .addTo(mapInstance.current); } if (device.device_name === \"valve\") { L.circleMarker([lat, lon], { radius: 8, fillColor: colorMap.valve, color: colorMap.valve, fillOpacity: 0.8, weight: 2, }) .bindPopup(`Valve in ${device.section_name}`) .on(\"click\", () => handleValveClick(device.section_device_id)) .addTo(mapInstance.current); } if (device.device_name === \"npk\") { L.circleMarker([lat, lon], { radius: 8, fillColor: colorMap.npk, color: colorMap.npk, fillOpacity: 0.8, weight: 2, }) .bindPopup(`NPK Sensor in ${device.section_name}`) .addTo(mapInstance.current); } } }); const legendData = [ { type: \"moisture\", color: colorMap.moisture }, { type: \"valve\", color: colorMap.valve }, { type: \"npk\", color: colorMap.npk }, ]; setLegendItems(legendData); }, [locationCoordinates, device_values]); const isWithinBounds = (coordinates, farmlandCoordinates) => { const polygon = L.polygon(farmlandCoordinates); return polygon.getBounds().contains(coordinates); }; const handleMoistureSensorClick = async (sensorId) => { try { const response = await fetch(`/farmer/farm/moisture/${sensorId}`); const data = await response.json(); if (data.length === 0) { console.error(\"No data available for the selected sensor\"); return; } const labels = data.map(item => new Date(item.timestamp).toLocaleString()); const values = data.map(item => item.moisture_value); setChartData({ labels, values }); setChartType('line'); setIsModalOpen(true); } catch (error) { console.error(\"Error fetching moisture data:\", error); } }; const handleValveClick = async (valveId) => { try { const response = await fetch(`/farmer/farm/valve/${valveId}`); const data = await response.json(); const labels = data.map(item => new Date(item.timestamp).toLocaleString()); const values = data.map(item => item.valve_status?.trim()); setChartData({ labels, values }); setChartType('timeline'); setIsModalOpen(true); } catch (error) { console.error(\"Error fetching valve data:\", error); } }; const handleCloseModal = () => { setIsModalOpen(false); setChartData\n    return (\n        <div ref={scrollerRef} className=\"borderring p-0\" style={{ overflow: \"hidden\", scrollbarWidth: \"none\", msOverflowStyle: \"none\" }}>\n            <div className=\"borderring\" style={{ position: \"relative\", border: 'none' }}>\n                <h6 className=\"text-secondary\" style={{ zIndex: 2, position: \"relative\", top: '0px', left: '0px' }}>Field Overview</h6>\n                <div\n                    ref={mapRef}\n                    style={{\n                        width: \"100%\",\n                        height: \"445px\",\n                        scale: \"1.45\",\n                        overflow: \"hidden\",\n                        position: \"relative\"\n                    }}\n                ></div>\n\n                <div style={{\n                    position: \"absolute\",\n                    top: \"10px\",\n                    right: \"10px\",\n                    backgroundColor: \"white\",\n                    padding: \"6px\",\n                    borderRadius: \"5px\",\n                    boxShadow: \"0 0 5px rgba(0,0,0,0.5)\",\n                    zIndex: 10,\n                }}>\n                    {legendItems.map((item) => (\n                        <div key={item.type} style={{ display: \"flex\", alignItems: \"center\" }}>\n                            <div style={{ width: \"10px\", height: \"10px\", backgroundColor: item.color, marginRight: \"5px\" }}></div>\n                            <span style={{ fontSize: '13px' }}>{item.type.charAt(0).toUpperCase() + item.type.slice(1)}</span>\n                        </div>\n                    ))}\n                    <img src={campass} width={20} /> <span style={{ fontSize: '13px' }}>Campass</span>\n                </div>\n\n                {isModalOpen && (\n                    <Modal show={isModalOpen} handleClose={handleCloseModal} chartData={chartData} chartType={chartType} />\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default MapContainer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}