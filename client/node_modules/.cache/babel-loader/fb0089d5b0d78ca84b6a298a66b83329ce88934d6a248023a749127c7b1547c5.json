{"ast":null,"code":"var _jsxFileName = \"/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  jsonData\n}) => {\n  _s();\n  const scrollerRef = useRef(null);\n  const mapRef = useRef(null);\n  const [legendItems, setLegendItems] = useState([]);\n  useEffect(() => {\n    const handleWheel = event => {\n      event.preventDefault();\n      if (scrollerRef.current) {\n        scrollerRef.current.scrollLeft += event.deltaY;\n      }\n    };\n    const scroller = scrollerRef.current;\n    if (scroller) {\n      scroller.addEventListener(\"wheel\", handleWheel, {\n        passive: false\n      });\n    }\n    return () => {\n      if (scroller) {\n        scroller.removeEventListener(\"wheel\", handleWheel);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (mapRef.current) {\n      // Initialize the map\n      const map = L.map(mapRef.current).setView([16.22525, 74.8424], 25);\n\n      // Add tile layer\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        maxZoom: 29,\n        minZoom: 2\n      }).addTo(map);\n\n      // Define colors for device types\n      const colorMap = {\n        farmland: \"green\",\n        valve: \"orange\",\n        moisture: \"blue\",\n        npk: \"red\"\n      };\n\n      // For dynamically updating legend items\n      const uniqueTypes = new Set();\n\n      // Handle farmland area\n      const farmlandCoordinates = jsonData.farmlocation.farm_loc.map(coord => coord.split(',').map(Number));\n      const farmlandLayer = L.polygon(farmlandCoordinates, {\n        color: colorMap.farmland\n      }).addTo(map);\n      farmlandLayer.bindPopup(\"Farmland Area\");\n      const farmlandBounds = L.latLngBounds(farmlandCoordinates);\n      map.fitBounds(farmlandBounds);\n      uniqueTypes.add(\"farmland\");\n\n      // Process each sensor in sensorlocation\n      jsonData.sensorlocation.forEach(sensor => {\n        uniqueTypes.add(sensor.device_name);\n        const [lat, lon] = sensor.device_location.split(\",\").map(Number);\n        const color = colorMap[sensor.device_name] || \"gray\";\n        L.circleMarker([lat, lon], {\n          radius: sensor.device_name === \"moisture\" ? 5 : 8,\n          fillColor: color,\n          color: \"black\",\n          fillOpacity: 1,\n          stroke: sensor.device_name !== \"moisture\"\n        }).addTo(map).bindPopup(`${sensor.device_name}: ${sensor.section_id}`);\n      });\n\n      // Process farm device locations\n      jsonData.farmdevicelocation.forEach(device => {\n        uniqueTypes.add(device.device_name);\n        const [lat, lon] = device.device_location.split(\",\").map(Number);\n        const color = colorMap[device.device_name] || \"gray\";\n        L.circleMarker([lat, lon], {\n          radius: 6,\n          fillColor: color,\n          color: color,\n          fillOpacity: 1,\n          weight: 1\n        }).addTo(map).bindPopup(`${device.device_name}: ${device.farm_device_id}`);\n      });\n\n      // Create the legend items dynamically\n      const legendData = Array.from(uniqueTypes).map(type => ({\n        type,\n        color: colorMap[type] || \"gray\"\n      }));\n      setLegendItems(legendData);\n\n      // Cleanup on unmount\n      return () => {\n        map.remove();\n      };\n    }\n  }, [jsonData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: scrollerRef,\n    style: {\n      overflow: \"hidden\",\n      scrollbarWidth: \"none\",\n      msOverflowStyle: \"none\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        border: 'none'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        style: {\n          zIndex: 2,\n          position: \"relative\"\n        },\n        children: \"Field Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mapRef,\n        style: {\n          width: \"100%\",\n          height: \"445px\",\n          scale: \"1.45\",\n          overflow: \"hidden\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: \"10px\",\n          right: \"10px\",\n          backgroundColor: \"white\",\n          padding: \"6px\",\n          borderRadius: \"5px\",\n          boxShadow: \"0 0 5px rgba(0,0,0,0.5)\",\n          zIndex: 10\n        },\n        children: legendItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"10px\",\n              height: \"10px\",\n              backgroundColor: item.color,\n              marginRight: \"5px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: item.type.charAt(0).toUpperCase() + item.type.slice(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this)]\n        }, item.type, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n_s(Map, \"llK4DkB6zImMaC2TkCdSqVTYzOQ=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","jsxDEV","_jsxDEV","Map","jsonData","_s","scrollerRef","mapRef","legendItems","setLegendItems","handleWheel","event","preventDefault","current","scrollLeft","deltaY","scroller","addEventListener","passive","removeEventListener","map","setView","tileLayer","maxZoom","minZoom","addTo","colorMap","farmland","valve","moisture","npk","uniqueTypes","Set","farmlandCoordinates","farmlocation","farm_loc","coord","split","Number","farmlandLayer","polygon","color","bindPopup","farmlandBounds","latLngBounds","fitBounds","add","sensorlocation","forEach","sensor","device_name","lat","lon","device_location","circleMarker","radius","fillColor","fillOpacity","stroke","section_id","farmdevicelocation","device","weight","farm_device_id","legendData","Array","from","type","remove","ref","style","overflow","scrollbarWidth","msOverflowStyle","children","position","border","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","width","height","scale","top","right","backgroundColor","padding","borderRadius","boxShadow","item","display","alignItems","marginRight","charAt","toUpperCase","slice","_c","$RefreshReg$"],"sources":["/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\n\nconst Map = ({ jsonData }) => {\n    const scrollerRef = useRef(null);\n    const mapRef = useRef(null);\n    const [legendItems, setLegendItems] = useState([]);\n\n    useEffect(() => {\n        const handleWheel = (event) => {\n            event.preventDefault();\n            if (scrollerRef.current) {\n                scrollerRef.current.scrollLeft += event.deltaY;\n            }\n        };\n\n        const scroller = scrollerRef.current;\n        if (scroller) {\n            scroller.addEventListener(\"wheel\", handleWheel, { passive: false });\n        }\n\n        return () => {\n            if (scroller) {\n                scroller.removeEventListener(\"wheel\", handleWheel);\n            }\n        };\n    }, []);\n\n    useEffect(() => {\n        if (mapRef.current) {\n            // Initialize the map\n            const map = L.map(mapRef.current).setView([16.22525, 74.8424], 25);\n\n            // Add tile layer\n            L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n                maxZoom: 29,\n                minZoom: 2,\n            }).addTo(map);\n\n            // Define colors for device types\n            const colorMap = {\n                farmland: \"green\",\n                valve: \"orange\",\n                moisture: \"blue\",\n                npk: \"red\",\n            };\n\n            // For dynamically updating legend items\n            const uniqueTypes = new Set();\n\n            // Handle farmland area\n            const farmlandCoordinates = jsonData.farmlocation.farm_loc.map(coord => coord.split(',').map(Number));\n            const farmlandLayer = L.polygon(farmlandCoordinates, { color: colorMap.farmland }).addTo(map);\n            farmlandLayer.bindPopup(\"Farmland Area\");\n            const farmlandBounds = L.latLngBounds(farmlandCoordinates);\n            map.fitBounds(farmlandBounds);\n\n            uniqueTypes.add(\"farmland\");\n\n            // Process each sensor in sensorlocation\n            jsonData.sensorlocation.forEach(sensor => {\n                uniqueTypes.add(sensor.device_name);\n                const [lat, lon] = sensor.device_location.split(\",\").map(Number);\n                const color = colorMap[sensor.device_name] || \"gray\";\n\n                L.circleMarker([lat, lon], {\n                    radius: sensor.device_name === \"moisture\" ? 5 : 8,\n                    fillColor: color,\n                    color: \"black\",\n                    fillOpacity: 1,\n                    stroke: sensor.device_name !== \"moisture\",\n                }).addTo(map).bindPopup(`${sensor.device_name}: ${sensor.section_id}`);\n            });\n\n            // Process farm device locations\n            jsonData.farmdevicelocation.forEach(device => {\n                uniqueTypes.add(device.device_name);\n                const [lat, lon] = device.device_location.split(\",\").map(Number);\n                const color = colorMap[device.device_name] || \"gray\";\n\n                L.circleMarker([lat, lon], {\n                    radius: 6,\n                    fillColor: color,\n                    color: color,\n                    fillOpacity: 1,\n                    weight: 1,\n                }).addTo(map).bindPopup(`${device.device_name}: ${device.farm_device_id}`);\n            });\n\n            // Create the legend items dynamically\n            const legendData = Array.from(uniqueTypes).map(type => ({\n                type,\n                color: colorMap[type] || \"gray\",\n            }));\n            setLegendItems(legendData);\n\n            // Cleanup on unmount\n            return () => {\n                map.remove();\n            };\n        }\n    }, [jsonData]);\n\n    return (\n        <div ref={scrollerRef} style={{ overflow: \"hidden\", scrollbarWidth: \"none\", msOverflowStyle: \"none\" }}>\n            <div style={{ position: \"relative\", border: 'none' }}>\n                <h6 style={{ zIndex: 2, position: \"relative\" }}>Field Overview</h6>\n                <div ref={mapRef} style={{ width: \"100%\", height: \"445px\", scale: \"1.45\", overflow: \"hidden\" }}></div>\n\n                {/* Dynamic Legend */}\n                <div style={{\n                    position: \"absolute\",\n                    top: \"10px\",\n                    right: \"10px\",\n                    backgroundColor: \"white\",\n                    padding: \"6px\",\n                    borderRadius: \"5px\",\n                    boxShadow: \"0 0 5px rgba(0,0,0,0.5)\",\n                    zIndex: 10,\n                }}>\n                    {legendItems.map((item) => (\n                        <div key={item.type} style={{ display: \"flex\", alignItems: \"center\" }}>\n                            <div style={{ width: \"10px\", height: \"10px\", backgroundColor: item.color, marginRight: \"5px\" }}></div>\n                            <span>{item.type.charAt(0).toUpperCase() + item.type.slice(1)}</span>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}