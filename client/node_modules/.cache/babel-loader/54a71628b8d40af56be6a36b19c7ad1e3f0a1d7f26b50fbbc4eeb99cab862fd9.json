{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Bar, Line, Doughnut, Radar, PolarArea, Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, LineElement } from 'chart.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Popover, OverlayTrigger, Modal, Button, Form } from 'react-bootstrap';\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, LineElement);\nconst getUniqueColor = index => {\n  const darkGreenShades = ['#013220', '#004225', '#0B3D2E', '#2E8B57', '#05402D', '#064635', '#0A4D3C', '#11574A', '#1B7D5F', '#145C51', '#006400', '#004E2C', '#00564D', '#007860', '#006B54'];\n  return darkGreenShades[Math.floor(Math.random() * darkGreenShades.length)];\n};\nconst Sections = ({\n  collected_data = {}\n}) => {\n  _s();\n  var _farmer_details$farme;\n  const {\n    device_values,\n    farmer_details\n  } = collected_data;\n  const sectionsData = (device_values === null || device_values === void 0 ? void 0 : device_values.valve_devices_data) || [];\n  const moistureData = (device_values === null || device_values === void 0 ? void 0 : device_values.moisture_device_value) || [];\n  const farmer_id = farmer_details === null || farmer_details === void 0 ? void 0 : (_farmer_details$farme = farmer_details.farmer_details) === null || _farmer_details$farme === void 0 ? void 0 : _farmer_details$farme.farmer_id;\n  const sectionsWithMoisture = sectionsData.map(section => {\n    const moistureValues = moistureData.filter(moisture => moisture.section_id === section.section_id);\n    const avgMoisture = moistureValues.reduce((acc, curr) => acc + curr.moisture_value, 0) / (moistureValues.length || 1);\n    return {\n      ...section,\n      avg_section_moisture: avgMoisture\n    };\n  });\n  const [sectionsState, setSectionsState] = useState(sectionsWithMoisture.map(section => ({\n    ...section,\n    inputTime: '',\n    timer: 0,\n    remainingTime: 0,\n    isCounting: false,\n    isOnDisabled: true,\n    isManualMode: false\n  })));\n  const [inputDuration, setInputDuration] = useState('');\n  const [isStarted, setIsStarted] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [sectionDeviceId, setSectionDeviceId] = useState(null);\n  const [valveStatus, setValveStatus] = useState('off');\n  const [showAutoModal, setShowAutoModal] = useState(false);\n  const [mode, setMode] = useState('manual');\n  useEffect(() => {\n    if (collected_data.device_values) {\n      const updatedSections = sectionsWithMoisture.map(section => ({\n        ...section,\n        inputTime: '',\n        timer: 0,\n        remainingTime: 0,\n        isCounting: false,\n        isOnDisabled: true,\n        isManualMode: false\n      }));\n      setSectionsState(updatedSections);\n    }\n  }, [collected_data]);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSectionsState(prevState => prevState.map(section => {\n        if (section.isCounting && section.remainingTime > 0) {\n          return {\n            ...section,\n            remainingTime: section.remainingTime - 1\n          };\n        }\n        return section;\n      }));\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  const handleShow = () => setShowModal(true);\n  const handleClose = () => setShowModal(false);\n  const handleAutoShow = sectionId => {\n    setMode('auto');\n    setSectionDeviceId(sectionId);\n    setShowAutoModal(true);\n  };\n  const handleAutoClose = () => setShowAutoModal(false);\n  const columnChartData = {\n    labels: sectionsState.map(section => section.section_name),\n    datasets: [{\n      label: 'Moisture Value',\n      data: sectionsState.map(section => Math.floor(section.avg_section_moisture)),\n      backgroundColor: sectionsState.map((_, index) => getUniqueColor(index)),\n      borderColor: 'transparent',\n      borderWidth: 1,\n      type: 'bar',\n      barThickness: 30\n    }, {\n      label: 'Moisture Value Line',\n      data: sectionsState.map(section => Math.floor(section.avg_section_moisture)),\n      borderColor: 'black',\n      backgroundColor: 'transparent',\n      borderWidth: 2,\n      fill: false,\n      type: 'line',\n      tension: 0.4\n    }]\n  };\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n  };\n  const handleInputChange = e => {\n    setInputDuration(e.target.value);\n  };\n  const handleStartClick = () => {\n    setIsStarted(true);\n  };\n  const handleSaveChanges = async e => {\n    e.preventDefault();\n    if (!sectionDeviceId) {\n      console.error(\"Section Device ID is null\");\n      return;\n    }\n    const payload = {\n      mode: mode,\n      status: valveStatus,\n      timer: inputDuration,\n      farmer_id: farmer_id\n    };\n    console.log(\"Payload:\", payload);\n    console.log(\"Section Device ID:\", sectionDeviceId);\n    try {\n      const response = await fetch(`/farmer/farm/valve/${sectionDeviceId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"Failed to insert valve data\", errorText);\n        return;\n      }\n      const result = await response.json();\n      console.log(\"Inserted valve data successfully\", result);\n      setSectionsState(prevState => prevState.map(section => section.section_device_id === sectionDeviceId ? {\n        ...section,\n        timer: inputDuration,\n        remainingTime: inputDuration,\n        isCounting: true\n      } : section));\n    } catch (error) {\n      console.error(\"Error while inserting valve data\", error);\n    }\n    setIsStarted(false);\n    setValveStatus('off');\n  };\n  const handleStopClick = async sectionId => {\n    const section = sectionsState.find(section => section.section_device_id === sectionId);\n    const remainingTime = section.remainingTime;\n    try {\n      const response = await fetch(`/farmer/farm/valve/${sectionId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          mode: mode,\n          status: \"off\",\n          timer: remainingTime,\n          farmer_id: farmer_id\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"Failed to update valve data\", errorText);\n        return;\n      }\n      const result = await response.json();\n      console.log(\"Updated valve data successfully\", result);\n      setSectionsState(prevState => prevState.map(section => section.section_device_id === sectionId ? {\n        ...section,\n        timer: 0,\n        remainingTime: 0,\n        isCounting: false\n      } : section));\n    } catch (error) {\n      console.error(\"Error while updating valve data\", error);\n    }\n  };\n  const handleAutoConfirm = () => {\n    if (sectionsState.find(section => section.section_device_id === sectionDeviceId).avg_section_moisture < 30) {\n      setValveStatus('on');\n    } else {\n      setValveStatus('off');\n    }\n    setMode('auto');\n    handleSaveChanges({\n      preventDefault: () => {}\n    });\n    setShowAutoModal(false);\n  };\n};\n_s(Sections, \"moJkIpBYKdx6S15rg4BFWQyaxXk=\");\n_c = Sections;\nvar _c;\n$RefreshReg$(_c, \"Sections\");","map":{"version":3,"names":["React","useState","useEffect","Bar","Line","Doughnut","Radar","PolarArea","Pie","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","LineElement","Popover","OverlayTrigger","Modal","Button","Form","register","getUniqueColor","index","darkGreenShades","Math","floor","random","length","Sections","collected_data","_s","_farmer_details$farme","device_values","farmer_details","sectionsData","valve_devices_data","moistureData","moisture_device_value","farmer_id","sectionsWithMoisture","map","section","moistureValues","filter","moisture","section_id","avgMoisture","reduce","acc","curr","moisture_value","avg_section_moisture","sectionsState","setSectionsState","inputTime","timer","remainingTime","isCounting","isOnDisabled","isManualMode","inputDuration","setInputDuration","isStarted","setIsStarted","showModal","setShowModal","sectionDeviceId","setSectionDeviceId","valveStatus","setValveStatus","showAutoModal","setShowAutoModal","mode","setMode","updatedSections","interval","setInterval","prevState","clearInterval","handleShow","handleClose","handleAutoShow","sectionId","handleAutoClose","columnChartData","labels","section_name","datasets","label","data","backgroundColor","_","borderColor","borderWidth","type","barThickness","fill","tension","capitalizeFirstLetter","string","charAt","toUpperCase","slice","toLowerCase","handleInputChange","e","target","value","handleStartClick","handleSaveChanges","preventDefault","console","error","payload","status","log","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","result","json","section_device_id","handleStopClick","find","handleAutoConfirm","_c","$RefreshReg$"],"sources":["/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/Sections.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Bar, Line, Doughnut, Radar, PolarArea, Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, LineElement } from 'chart.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Popover, OverlayTrigger, Modal, Button, Form } from 'react-bootstrap';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n    LineElement\n);\n\nconst getUniqueColor = (index) => {\n    const darkGreenShades = [\n        '#013220', '#004225', '#0B3D2E', '#2E8B57', '#05402D',\n        '#064635', '#0A4D3C', '#11574A', '#1B7D5F', '#145C51',\n        '#006400', '#004E2C', '#00564D', '#007860', '#006B54'\n    ];\n\n    return darkGreenShades[Math.floor(Math.random() * darkGreenShades.length)];\n};\n\nconst Sections = ({ collected_data = {} }) => {\n    const { device_values, farmer_details } = collected_data;\n    const sectionsData = device_values?.valve_devices_data || [];\n    const moistureData = device_values?.moisture_device_value || [];\n    const farmer_id = farmer_details?.farmer_details?.farmer_id;\n\n    const sectionsWithMoisture = sectionsData.map(section => {\n        const moistureValues = moistureData.filter(moisture => moisture.section_id === section.section_id);\n        const avgMoisture = moistureValues.reduce((acc, curr) => acc + curr.moisture_value, 0) / (moistureValues.length || 1);\n        return {\n            ...section,\n            avg_section_moisture: avgMoisture\n        };\n    });\n\n    const [sectionsState, setSectionsState] = useState(\n        sectionsWithMoisture.map(section => ({\n            ...section,\n            inputTime: '',\n            timer: 0,\n            remainingTime: 0,\n            isCounting: false,\n            isOnDisabled: true,\n            isManualMode: false,\n        }))\n    );\n    const [inputDuration, setInputDuration] = useState('');\n    const [isStarted, setIsStarted] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n    const [sectionDeviceId, setSectionDeviceId] = useState(null);\n    const [valveStatus, setValveStatus] = useState('off');\n    const [showAutoModal, setShowAutoModal] = useState(false);\n    const [mode, setMode] = useState('manual');\n\n    useEffect(() => {\n        if (collected_data.device_values) {\n            const updatedSections = sectionsWithMoisture.map(section => ({\n                ...section,\n                inputTime: '',\n                timer: 0,\n                remainingTime: 0,\n                isCounting: false,\n                isOnDisabled: true,\n                isManualMode: false,\n            }));\n            setSectionsState(updatedSections);\n        }\n    }, [collected_data]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setSectionsState(prevState => prevState.map(section => {\n                if (section.isCounting && section.remainingTime > 0) {\n                    return { ...section, remainingTime: section.remainingTime - 1 };\n                }\n                return section;\n            }));\n        }, 1000);\n        return () => clearInterval(interval);\n    }, []);\n\n    const handleShow = () => setShowModal(true);\n    const handleClose = () => setShowModal(false);\n    const handleAutoShow = (sectionId) => {\n        setMode('auto');\n        setSectionDeviceId(sectionId);\n        setShowAutoModal(true);\n    };\n    const handleAutoClose = () => setShowAutoModal(false);\n\n    const columnChartData = {\n        labels: sectionsState.map(section => section.section_name),\n        datasets: [\n            {\n                label: 'Moisture Value',\n                data: sectionsState.map(section => Math.floor(section.avg_section_moisture)),\n                backgroundColor: sectionsState.map((_, index) => getUniqueColor(index)),\n                borderColor: 'transparent',\n                borderWidth: 1,\n                type: 'bar',\n                barThickness: 30,\n            },\n            {\n                label: 'Moisture Value Line',\n                data: sectionsState.map(section => Math.floor(section.avg_section_moisture)),\n                borderColor: 'black',\n                backgroundColor: 'transparent',\n                borderWidth: 2,\n                fill: false,\n                type: 'line',\n                tension: 0.4,\n            },\n        ],\n    };\n\n    const capitalizeFirstLetter = (string) => {\n        return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n    };\n\n    const handleInputChange = (e) => {\n        setInputDuration(e.target.value);\n    };\n\n    const handleStartClick = () => {\n        setIsStarted(true);\n    };\n\n    const handleSaveChanges = async (e) => {\n        e.preventDefault();\n        if (!sectionDeviceId) {\n            console.error(\"Section Device ID is null\");\n            return;\n        }\n\n        const payload = {\n            mode: mode,\n            status: valveStatus,\n            timer: inputDuration,\n            farmer_id: farmer_id,\n        };\n\n        console.log(\"Payload:\", payload);\n        console.log(\"Section Device ID:\", sectionDeviceId);\n\n        try {\n            const response = await fetch(`/farmer/farm/valve/${sectionDeviceId}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(payload),\n            });\n\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"Failed to insert valve data\", errorText);\n                return;\n            }\n\n            const result = await response.json();\n            console.log(\"Inserted valve data successfully\", result);\n\n            setSectionsState(prevState => prevState.map(section =>\n                section.section_device_id === sectionDeviceId\n                    ? { ...section, timer: inputDuration, remainingTime: inputDuration, isCounting: true }\n                    : section\n            ));\n        } catch (error) {\n            console.error(\"Error while inserting valve data\", error);\n        }\n\n        setIsStarted(false);\n        setValveStatus('off');\n    };\n\n    const handleStopClick = async (sectionId) => {\n        const section = sectionsState.find(section => section.section_device_id === sectionId);\n        const remainingTime = section.remainingTime;\n\n        try {\n            const response = await fetch(`/farmer/farm/valve/${sectionId}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    mode: mode,\n                    status: \"off\",\n                    timer: remainingTime,\n                    farmer_id: farmer_id,\n                }),\n            });\n\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"Failed to update valve data\", errorText);\n                return;\n            }\n\n            const result = await response.json();\n            console.log(\"Updated valve data successfully\", result);\n\n            setSectionsState(prevState => prevState.map(section =>\n                section.section_device_id === sectionId\n                    ? { ...section, timer: 0, remainingTime: 0, isCounting: false }\n                    : section\n            ));\n        } catch (error) {\n            console.error(\"Error while updating valve data\", error);\n        }\n    };\n\n    const handleAutoConfirm = () => {\n        if (sectionsState.find(section => section.section_device_id === sectionDeviceId).avg_section_moisture < 30) {\n            setValveStatus('on');\n        } else {\n            setValveStatus('off');\n        }\n        setMode('auto');\n        handleSaveChanges({ preventDefault: () => {} });\n        setShowAutoModal(false);\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}