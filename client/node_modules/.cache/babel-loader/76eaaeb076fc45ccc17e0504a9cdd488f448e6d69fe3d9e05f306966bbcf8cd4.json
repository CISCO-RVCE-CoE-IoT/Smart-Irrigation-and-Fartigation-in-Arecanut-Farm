{"ast":null,"code":"var _jsxFileName = \"/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport 'leaflet/dist/leaflet.css';\nimport campass from './WeatherImages/campass.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapContainer = ({\n  locationCoordinates,\n  device_values\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null); // Ref to store the map instance\n  const [legendItems, setLegendItems] = useState([]);\n  const scrollerRef = useRef(null);\n  const [isScrollable, setIsScrollable] = useState(true);\n  useEffect(() => {\n    const handleWheel = event => {\n      event.preventDefault();\n      if (isScrollable && scrollerRef.current) {\n        scrollerRef.current.scrollLeft += event.deltaY;\n      }\n    };\n    const handleClick = event => {\n      const bounds = scrollerRef.current.getBoundingClientRect();\n      // Check if the click was on the left or right side\n      if (event.clientX < bounds.left + bounds.width / 3 || event.clientX > bounds.right - bounds.width / 3) {\n        setIsScrollable(true); // Enable scrolling\n      } else {\n        setIsScrollable(false); // Disable scrolling\n      }\n    };\n    const scroller = scrollerRef.current;\n    if (scroller) {\n      scroller.addEventListener(\"wheel\", handleWheel, {\n        passive: false\n      });\n      scroller.addEventListener(\"click\", handleClick);\n    }\n    return () => {\n      if (scroller) {\n        scroller.removeEventListener(\"wheel\", handleWheel);\n        scroller.removeEventListener(\"click\", handleClick);\n      }\n    };\n  }, [isScrollable]);\n  useEffect(() => {\n    if (!locationCoordinates || !device_values) return;\n    if (mapInstance.current) {\n      mapInstance.current.remove();\n    }\n    if (mapRef.current) {\n      var _locationCoordinates$, _device_values$moistu, _locationCoordinates$2, _locationCoordinates$3;\n      mapInstance.current = L.map(mapRef.current).setView([16.22525, 74.8424], 16);\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        maxZoom: 29,\n        minZoom: 2\n      }).addTo(mapInstance.current);\n      const colorMap = {\n        farmland: \"green\",\n        valve: \"orange\",\n        moisture: \"darkblue\",\n        npk: \"red\"\n      };\n      const uniqueTypes = new Set();\n      const farmlandCoordinates = ((_locationCoordinates$ = locationCoordinates.farm_coordinates) === null || _locationCoordinates$ === void 0 ? void 0 : _locationCoordinates$.map(coord => {\n        const [lat, lon] = coord.split(\",\");\n        return [parseFloat(lat), parseFloat(lon)];\n      })) || [];\n      const farmlandLayer = L.polygon(farmlandCoordinates, {\n        color: colorMap.farmland\n      }).addTo(mapInstance.current);\n      farmlandLayer.bindPopup(\"Farmland Area\");\n      const moistureValuesMap = new Map();\n      device_values === null || device_values === void 0 ? void 0 : (_device_values$moistu = device_values.moisture_device_value) === null || _device_values$moistu === void 0 ? void 0 : _device_values$moistu.forEach(({\n        section_device_id,\n        moisture_value\n      }) => {\n        moistureValuesMap.set(section_device_id, moisture_value);\n      });\n      const uniqueDeviceMarkers = [];\n      (_locationCoordinates$2 = locationCoordinates.section_device) === null || _locationCoordinates$2 === void 0 ? void 0 : _locationCoordinates$2.forEach(device => {\n        var _device$device_locati;\n        const [lat, lon] = ((_device$device_locati = device.device_location) === null || _device$device_locati === void 0 ? void 0 : _device$device_locati.split(\",\").map(Number)) || [];\n        if (lat && lon) {\n          uniqueTypes.add(device.device_name);\n\n          // Ensure the sensor is within the farmland bounds\n          if (isWithinBounds([lat, lon], farmlandCoordinates)) {\n            const sensorMarker = L.circleMarker([lat, lon], {\n              radius: 3,\n              fillColor: \"black\",\n              color: \"black\",\n              fillOpacity: 1,\n              weight: 1\n            }).bindPopup(`${device.device_name.charAt(0).toUpperCase() + device.device_name.slice(1)} Sensor`);\n            uniqueDeviceMarkers.push(sensorMarker);\n            if (device.device_name === \"moisture\") {\n              const moistureValue = moistureValuesMap.get(device.section_device_id) || 0;\n              const moistureRadius = moistureValue * 0.05;\n              const moistureCircle = L.circle([lat, lon], {\n                radius: moistureRadius,\n                fillColor: colorMap.moisture,\n                color: colorMap.moisture,\n                fillOpacity: 0.4,\n                weight: 1\n              }).bindPopup(`Moisture Sensor in ${device.section_name}<br/>Value: ${moistureValue}`);\n              uniqueDeviceMarkers.push(moistureCircle);\n            } else if (device.device_name === \"valve\") {\n              var _device_values$valve_;\n              const valveStatus = device_values === null || device_values === void 0 ? void 0 : (_device_values$valve_ = device_values.valve_devices_data) === null || _device_values$valve_ === void 0 ? void 0 : _device_values$valve_.find(v => v.section_device_id === device.section_device_id);\n              const valveColor = (valveStatus === null || valveStatus === void 0 ? void 0 : valveStatus.valve_status) === \"on\" ? \"green\" : \"red\";\n              const valveMarker = L.circleMarker([lat, lon], {\n                radius: 8,\n                fillColor: valveColor,\n                color: valveColor,\n                fillOpacity: 0.6,\n                weight: 2\n              }).bindPopup(`Valve in ${device.section_name}`);\n              uniqueDeviceMarkers.push(valveMarker);\n            }\n          }\n        }\n      });\n      (_locationCoordinates$3 = locationCoordinates.farm_device) === null || _locationCoordinates$3 === void 0 ? void 0 : _locationCoordinates$3.forEach(device => {\n        var _device$device_locati2;\n        const [lat, lon] = ((_device$device_locati2 = device.device_location) === null || _device$device_locati2 === void 0 ? void 0 : _device$device_locati2.split(\",\").map(Number)) || [];\n        if (lat && lon) {\n          if (isWithinBounds([lat, lon], farmlandCoordinates)) {\n            const npkMarker = L.circleMarker([lat, lon], {\n              radius: 5,\n              fillColor: colorMap.npk,\n              color: colorMap.npk,\n              fillOpacity: 1,\n              stroke: false\n            }).bindPopup(`NPK Device: ${device.device_name}`);\n            uniqueDeviceMarkers.push(npkMarker);\n          }\n        }\n      });\n\n      // Add all the markers (sensors) to the map at once\n      uniqueDeviceMarkers.forEach(marker => marker.addTo(mapInstance.current));\n\n      // Update the legend with sensors\n      const legendData = [{\n        type: \"moisture\",\n        color: colorMap.moisture\n      }, {\n        type: \"valve\",\n        color: \"green\"\n      },\n      // You could also dynamically change this based on valve status\n      {\n        type: \"npk\",\n        color: colorMap.npk\n      }];\n      setLegendItems(legendData);\n      const bounds = L.latLngBounds(farmlandCoordinates);\n      uniqueDeviceMarkers.forEach(marker => bounds.extend(marker.getLatLng()));\n      mapInstance.current.fitBounds(bounds);\n    }\n  }, [locationCoordinates, device_values]);\n\n  // Function to check if coordinates are within the farmland bounds\n  const isWithinBounds = (coordinates, farmlandCoordinates) => {\n    const polygon = L.polygon(farmlandCoordinates);\n    return polygon.getBounds().contains(coordinates);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: scrollerRef,\n    className: \"borderring p-0\",\n    style: {\n      overflow: \"hidden\",\n      scrollbarWidth: \"none\",\n      msOverflowStyle: \"none\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"borderring\",\n      style: {\n        position: \"relative\",\n        border: 'none'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"text-secondary\",\n        style: {\n          zIndex: 2,\n          position: \"relative\",\n          top: '0px',\n          left: '0px'\n        },\n        children: \"Field Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mapRef,\n        style: {\n          width: \"100%\",\n          height: \"445px\",\n          scale: \"1.45\",\n          overflow: \"hidden\",\n          position: \"relative\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: \"10px\",\n          right: \"10px\",\n          backgroundColor: \"white\",\n          padding: \"6px\",\n          borderRadius: \"5px\",\n          boxShadow: \"0 0 5px rgba(0,0,0,0.5)\",\n          zIndex: 10\n        },\n        children: [legendItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"10px\",\n              height: \"10px\",\n              backgroundColor: item.color,\n              marginRight: \"5px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: '13px'\n            },\n            children: item.type.charAt(0).toUpperCase() + item.type.slice(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 29\n          }, this)]\n        }, item.type, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: campass,\n          width: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '13px'\n          },\n          children: \"Campass\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 53\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this);\n};\n_s(MapContainer, \"PGQaEHuF9wjm0f1fKBBQhWVApv8=\");\n_c = MapContainer;\nexport default MapContainer;\nvar _c;\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","campass","jsxDEV","_jsxDEV","MapContainer","locationCoordinates","device_values","_s","mapRef","mapInstance","legendItems","setLegendItems","scrollerRef","isScrollable","setIsScrollable","handleWheel","event","preventDefault","current","scrollLeft","deltaY","handleClick","bounds","getBoundingClientRect","clientX","left","width","right","scroller","addEventListener","passive","removeEventListener","remove","_locationCoordinates$","_device_values$moistu","_locationCoordinates$2","_locationCoordinates$3","map","setView","tileLayer","maxZoom","minZoom","addTo","colorMap","farmland","valve","moisture","npk","uniqueTypes","Set","farmlandCoordinates","farm_coordinates","coord","lat","lon","split","parseFloat","farmlandLayer","polygon","color","bindPopup","moistureValuesMap","Map","moisture_device_value","forEach","section_device_id","moisture_value","set","uniqueDeviceMarkers","section_device","device","_device$device_locati","device_location","Number","add","device_name","isWithinBounds","sensorMarker","circleMarker","radius","fillColor","fillOpacity","weight","charAt","toUpperCase","slice","push","moistureValue","get","moistureRadius","moistureCircle","circle","section_name","_device_values$valve_","valveStatus","valve_devices_data","find","v","valveColor","valve_status","valveMarker","farm_device","_device$device_locati2","npkMarker","stroke","marker","legendData","type","latLngBounds","extend","getLatLng","fitBounds","coordinates","getBounds","contains","ref","className","style","overflow","scrollbarWidth","msOverflowStyle","children","position","border","zIndex","top","fileName","_jsxFileName","lineNumber","columnNumber","height","scale","backgroundColor","padding","borderRadius","boxShadow","item","display","alignItems","marginRight","fontSize","src","_c","$RefreshReg$"],"sources":["/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport 'leaflet/dist/leaflet.css';\nimport campass from './WeatherImages/campass.png';\n\nconst MapContainer = ({ locationCoordinates, device_values }) => {\n    const mapRef = useRef(null);\n    const mapInstance = useRef(null);  // Ref to store the map instance\n    const [legendItems, setLegendItems] = useState([]);\n\n    const scrollerRef = useRef(null);\n    const [isScrollable, setIsScrollable] = useState(true);\n\n    useEffect(() => {\n        const handleWheel = (event) => {\n            event.preventDefault();\n            if (isScrollable && scrollerRef.current) {\n                scrollerRef.current.scrollLeft += event.deltaY;\n            }\n        };\n\n        const handleClick = (event) => {\n            const bounds = scrollerRef.current.getBoundingClientRect();\n            // Check if the click was on the left or right side\n            if (event.clientX < bounds.left + bounds.width / 3 || event.clientX > bounds.right - bounds.width / 3) {\n                setIsScrollable(true); // Enable scrolling\n            } else {\n                setIsScrollable(false); // Disable scrolling\n            }\n        };\n\n        const scroller = scrollerRef.current;\n        if (scroller) {\n            scroller.addEventListener(\"wheel\", handleWheel, { passive: false });\n            scroller.addEventListener(\"click\", handleClick);\n        }\n\n        return () => {\n            if (scroller) {\n                scroller.removeEventListener(\"wheel\", handleWheel);\n                scroller.removeEventListener(\"click\", handleClick);\n            }\n        };\n    }, [isScrollable]);\n\n    useEffect(() => {\n        if (!locationCoordinates || !device_values) return;\n\n        if (mapInstance.current) {\n            mapInstance.current.remove();\n        }\n\n        if (mapRef.current) {\n            mapInstance.current = L.map(mapRef.current).setView([16.22525, 74.8424], 16);\n\n            L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n                maxZoom: 29,\n                minZoom: 2,\n            }).addTo(mapInstance.current);\n\n            const colorMap = {\n                farmland: \"green\",\n                valve: \"orange\",\n                moisture: \"darkblue\",\n                npk: \"red\",\n            };\n\n            const uniqueTypes = new Set();\n\n            const farmlandCoordinates = locationCoordinates.farm_coordinates?.map(coord => {\n                const [lat, lon] = coord.split(\",\");\n                return [parseFloat(lat), parseFloat(lon)];\n            }) || [];\n\n            const farmlandLayer = L.polygon(farmlandCoordinates, { color: colorMap.farmland }).addTo(mapInstance.current);\n            farmlandLayer.bindPopup(\"Farmland Area\");\n\n            const moistureValuesMap = new Map();\n            device_values?.moisture_device_value?.forEach(({ section_device_id, moisture_value }) => {\n                moistureValuesMap.set(section_device_id, moisture_value);\n            });\n\n            const uniqueDeviceMarkers = [];\n\n            locationCoordinates.section_device?.forEach(device => {\n                const [lat, lon] = device.device_location?.split(\",\").map(Number) || [];\n                if (lat && lon) {\n                    uniqueTypes.add(device.device_name);\n\n                    // Ensure the sensor is within the farmland bounds\n                    if (isWithinBounds([lat, lon], farmlandCoordinates)) {\n                        const sensorMarker = L.circleMarker([lat, lon], {\n                            radius: 3,\n                            fillColor: \"black\",\n                            color: \"black\",\n                            fillOpacity: 1,\n                            weight: 1,\n                        }).bindPopup(`${device.device_name.charAt(0).toUpperCase() + device.device_name.slice(1)} Sensor`);\n                        uniqueDeviceMarkers.push(sensorMarker);\n\n                        if (device.device_name === \"moisture\") {\n                            const moistureValue = moistureValuesMap.get(device.section_device_id) || 0;\n                            const moistureRadius = moistureValue * 0.05;\n\n                            const moistureCircle = L.circle([lat, lon], {\n                                radius: moistureRadius,\n                                fillColor: colorMap.moisture,\n                                color: colorMap.moisture,\n                                fillOpacity: 0.4,\n                                weight: 1,\n                            }).bindPopup(`Moisture Sensor in ${device.section_name}<br/>Value: ${moistureValue}`);\n                            uniqueDeviceMarkers.push(moistureCircle);\n                        } else if (device.device_name === \"valve\") {\n                            const valveStatus = device_values?.valve_devices_data?.find(v => v.section_device_id === device.section_device_id);\n                            const valveColor = valveStatus?.valve_status === \"on\" ? \"green\" : \"red\";\n\n                            const valveMarker = L.circleMarker([lat, lon], {\n                                radius: 8,\n                                fillColor: valveColor,\n                                color: valveColor,\n                                fillOpacity: 0.6,\n                                weight: 2,\n                            }).bindPopup(`Valve in ${device.section_name}`);\n                            uniqueDeviceMarkers.push(valveMarker);\n                        }\n                    }\n                }\n            });\n\n            locationCoordinates.farm_device?.forEach(device => {\n                const [lat, lon] = device.device_location?.split(\",\").map(Number) || [];\n                if (lat && lon) {\n                    if (isWithinBounds([lat, lon], farmlandCoordinates)) {\n                        const npkMarker = L.circleMarker([lat, lon], {\n                            radius: 5,\n                            fillColor: colorMap.npk,\n                            color: colorMap.npk,\n                            fillOpacity: 1,\n                            stroke: false,\n                        }).bindPopup(`NPK Device: ${device.device_name}`);\n                        uniqueDeviceMarkers.push(npkMarker);\n                    }\n                }\n            });\n\n            // Add all the markers (sensors) to the map at once\n            uniqueDeviceMarkers.forEach(marker => marker.addTo(mapInstance.current));\n\n            // Update the legend with sensors\n            const legendData = [\n                { type: \"moisture\", color: colorMap.moisture },\n                { type: \"valve\", color: \"green\" },  // You could also dynamically change this based on valve status\n                { type: \"npk\", color: colorMap.npk },\n            ];\n\n            setLegendItems(legendData);\n\n            const bounds = L.latLngBounds(farmlandCoordinates);\n            uniqueDeviceMarkers.forEach(marker => bounds.extend(marker.getLatLng()));\n            mapInstance.current.fitBounds(bounds);\n        }\n    }, [locationCoordinates, device_values]);\n\n    // Function to check if coordinates are within the farmland bounds\n    const isWithinBounds = (coordinates, farmlandCoordinates) => {\n        const polygon = L.polygon(farmlandCoordinates);\n        return polygon.getBounds().contains(coordinates);\n    };\n\n    return (\n        <div ref={scrollerRef} className=\"borderring p-0\" style={{ overflow: \"hidden\", scrollbarWidth: \"none\", msOverflowStyle: \"none\" }}>\n            <div className=\"borderring\" style={{ position: \"relative\", border: 'none' }}>\n                <h6 className=\"text-secondary\" style={{ zIndex: 2, position: \"relative\", top: '0px', left: '0px' }}>Field Overview</h6>\n                <div\n                    ref={mapRef}\n                    style={{\n                        width: \"100%\",\n                        height: \"445px\",\n                        scale: \"1.45\",\n                        overflow: \"hidden\",\n                        position: \"relative\"\n                    }}\n                >\n                </div>\n\n                <div style={{\n                    position: \"absolute\",\n                    top: \"10px\",\n                    right: \"10px\",\n                    backgroundColor: \"white\",\n                    padding: \"6px\",\n                    borderRadius: \"5px\",\n                    boxShadow: \"0 0 5px rgba(0,0,0,0.5)\",\n                    zIndex: 10,\n                }}>\n                    {legendItems.map((item) => (\n                        <div key={item.type} style={{ display: \"flex\", alignItems: \"center\" }}>\n                            <div style={{ width: \"10px\", height: \"10px\", backgroundColor: item.color, marginRight: \"5px\" }}></div>\n                            <span style={{ fontSize: '13px' }}>{item.type.charAt(0).toUpperCase() + item.type.slice(1)}</span>\n                        </div>\n                    ))}\n                    <img src={campass} width={20}/> <span style={{ fontSize: '13px' }}>Campass</span>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default MapContainer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}