{"ast":null,"code":"var _jsxFileName = \"/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/src/pages/User/Components/Farmer/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  jsonData\n}) => {\n  _s();\n  const scrollerRef = useRef(null);\n  const mapRef = useRef(null);\n  const [legendItems, setLegendItems] = useState([]);\n  useEffect(() => {\n    const handleWheel = event => {\n      event.preventDefault();\n      if (scrollerRef.current) {\n        scrollerRef.current.scrollLeft += event.deltaY;\n      }\n    };\n    const scroller = scrollerRef.current;\n    if (scroller) {\n      scroller.addEventListener(\"wheel\", handleWheel, {\n        passive: false\n      });\n    }\n    return () => {\n      if (scroller) {\n        scroller.removeEventListener(\"wheel\", handleWheel);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (mapRef.current) {\n      // Create the map\n      const map = L.map(mapRef.current).setView([16.22525, 74.8424], 25);\n\n      // Add tile layer\n      L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        maxZoom: 29,\n        minZoom: 2\n      }).addTo(map);\n\n      // Create bounds for farmland area\n      let farmlandBounds;\n\n      // Define colors for sensor types\n      const colorMap = {\n        farmland: \"green\",\n        valve: \"orange\",\n        moisture: \"blue\",\n        npk: \"red\"\n      };\n\n      // Create a set to hold unique sensor types for the legend\n      const uniqueTypes = new Set();\n\n      // Process each data point\n      jsonData.mapData.forEach(data => {\n        uniqueTypes.add(data.type); // Add type to the set\n        if (data.type === \"farmland\") {\n          const farmlandLayer = L.polygon(data.coordinates, {\n            color: colorMap[data.type]\n          }).addTo(map);\n          farmlandLayer.bindPopup(\"Farmland Area\");\n\n          // Create bounds from farmland coordinates\n          farmlandBounds = L.latLngBounds(data.coordinates.map(coord => [coord[0], coord[1]]));\n        } else if (data.type === \"valve\") {\n          L.circleMarker([data.lat, data.lon], {\n            radius: 8,\n            fillColor: colorMap[data.type],\n            color: colorMap[data.type],\n            fillOpacity: 0.6,\n            weight: 2\n          }).addTo(map).bindPopup(data.label);\n        } else if (data.type === \"npk\") {\n          L.circleMarker([data.lat, data.lon], {\n            radius: 5,\n            fillColor: colorMap[data.type],\n            color: colorMap[data.type],\n            fillOpacity: 1,\n            stroke: false\n          }).addTo(map).bindPopup(data.label);\n        } else if (data.type === \"moisture\") {\n          const moistureRadiusInCm = data.moistureValue * 0.11; // Multiplier for centimeters\n\n          // Large circle for moisture reach in cm\n          L.circle([data.lat, data.lon], {\n            radius: moistureRadiusInCm,\n            fillColor: `rgba(173, 216, 230, 0.4)`,\n            color: colorMap[data.type],\n            fillOpacity: 0.3,\n            weight: 1\n          }).addTo(map).bindPopup(`${data.label}: ${data.moistureValue}% Moisture`);\n\n          // Small circle to represent the sensor itself\n          L.circleMarker([data.lat, data.lon], {\n            radius: 5,\n            fillColor: colorMap[data.type],\n            color: \"black\",\n            fillOpacity: 1,\n            stroke: false\n          }).addTo(map);\n        }\n      });\n\n      // Create legend items dynamically\n      const legendData = Array.from(uniqueTypes).map(type => ({\n        type,\n        color: colorMap[type] || \"gray\" // Fallback color\n      }));\n      setLegendItems(legendData);\n\n      // Fit the map to the farmland bounds if available\n      if (farmlandBounds) {\n        map.fitBounds(farmlandBounds);\n      } else {\n        // Optionally fit bounds to all other markers\n        const bounds = L.latLngBounds(jsonData.mapData.filter(loc => loc.type !== \"farmland\").map(loc => [loc.lat, loc.lon]));\n        map.fitBounds(bounds);\n      }\n\n      // Cleanup on component unmount\n      return () => {\n        map.remove();\n      };\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: scrollerRef,\n    className: \"borderring p-0\",\n    style: {\n      overflow: \"hidden\",\n      scrollbarWidth: \"none\",\n      msOverflowStyle: \"none\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"borderring\",\n      style: {\n        position: \"relative\",\n        border: 'none'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"text-secondary\",\n        style: {\n          zIndex: 2,\n          position: \"relative\",\n          top: '0px',\n          left: '0px'\n        },\n        children: \"Field Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mapRef,\n        style: {\n          width: \"100%\",\n          height: \"445px\",\n          scale: \"1.45\",\n          overflow: \"hidden\",\n          position: \"relative\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: \"10px\",\n          right: \"10px\",\n          backgroundColor: \"white\",\n          padding: \"6px\",\n          borderRadius: \"5px\",\n          boxShadow: \"0 0 5px rgba(0,0,0,0.5)\",\n          zIndex: 10\n        },\n        children: legendItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"10px\",\n              height: \"10px\",\n              backgroundColor: item.color,\n              marginRight: \"5px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: '13px'\n            },\n            children: item.type.charAt(0).toUpperCase() + item.type.slice(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this)]\n        }, item.type, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n};\n_s(Map, \"llK4DkB6zImMaC2TkCdSqVTYzOQ=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","jsxDEV","_jsxDEV","Map","jsonData","_s","scrollerRef","mapRef","legendItems","setLegendItems","handleWheel","event","preventDefault","current","scrollLeft","deltaY","scroller","addEventListener","passive","removeEventListener","map","setView","tileLayer","maxZoom","minZoom","addTo","farmlandBounds","colorMap","farmland","valve","moisture","npk","uniqueTypes","Set","mapData","forEach","data","add","type","farmlandLayer","polygon","coordinates","color","bindPopup","latLngBounds","coord","circleMarker","lat","lon","radius","fillColor","fillOpacity","weight","label","stroke","moistureRadiusInCm","moistureValue","circle","legendData","Array","from","fitBounds","bounds","filter","loc","remove","ref","className","style","overflow","scrollbarWidth","msOverflowStyle","children","position","border","zIndex","top","left","fileName","_jsxFileName","lineNumber","columnNumber","width","height","scale","right","backgroundColor","padding","borderRadius","boxShadow","item","display","alignItems","marginRight","fontSize","charAt","toUpperCase","slice","_c","$RefreshReg$"],"sources":["/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/src/pages/User/Components/Farmer/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\n\nconst Map = ({jsonData}) => {\n    const scrollerRef = useRef(null);\n    const mapRef = useRef(null);\n    const [legendItems, setLegendItems] = useState([]);\n\n    useEffect(() => {\n        const handleWheel = (event) => {\n            event.preventDefault();\n            if (scrollerRef.current) {\n                scrollerRef.current.scrollLeft += event.deltaY;\n            }\n        };\n\n        const scroller = scrollerRef.current;\n        if (scroller) {\n            scroller.addEventListener(\"wheel\", handleWheel, { passive: false });\n        }\n\n        return () => {\n            if (scroller) {\n                scroller.removeEventListener(\"wheel\", handleWheel);\n            }\n        };\n    }, []);\n\n    useEffect(() => {\n        if (mapRef.current) {\n           \n\n            // Create the map\n            const map = L.map(mapRef.current).setView([16.22525, 74.8424], 25);\n\n            // Add tile layer\n            L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n                maxZoom: 29,\n                minZoom: 2,\n            }).addTo(map);\n\n            // Create bounds for farmland area\n            let farmlandBounds;\n\n            // Define colors for sensor types\n            const colorMap = {\n                farmland: \"green\",\n                valve: \"orange\",\n                moisture: \"blue\",\n                npk: \"red\",\n            };\n\n            // Create a set to hold unique sensor types for the legend\n            const uniqueTypes = new Set();\n\n            // Process each data point\n            jsonData.mapData.forEach((data) => {\n                uniqueTypes.add(data.type); // Add type to the set\n                if (data.type === \"farmland\") {\n                    const farmlandLayer = L.polygon(data.coordinates, { color: colorMap[data.type] }).addTo(map);\n                    farmlandLayer.bindPopup(\"Farmland Area\");\n\n                    // Create bounds from farmland coordinates\n                    farmlandBounds = L.latLngBounds(data.coordinates.map(coord => [coord[0], coord[1]]));\n                } else if (data.type === \"valve\") {\n                    L.circleMarker([data.lat, data.lon], {\n                        radius: 8,\n                        fillColor: colorMap[data.type],\n                        color: colorMap[data.type],\n                        fillOpacity: 0.6,\n                        weight: 2,\n                    }).addTo(map).bindPopup(data.label);\n                } else if (data.type === \"npk\") {\n                    L.circleMarker([data.lat, data.lon], {\n                        radius: 5,\n                        fillColor: colorMap[data.type],\n                        color: colorMap[data.type],\n                        fillOpacity: 1,\n                        stroke: false,\n                    }).addTo(map).bindPopup(data.label);\n                } else if (data.type === \"moisture\") {\n                    const moistureRadiusInCm = data.moistureValue * 0.11; // Multiplier for centimeters\n\n                    // Large circle for moisture reach in cm\n                    L.circle([data.lat, data.lon], {\n                        radius: moistureRadiusInCm,\n                        fillColor: `rgba(173, 216, 230, 0.4)`,\n                        color: colorMap[data.type],\n                        fillOpacity: 0.3,\n                        weight: 1,\n                    }).addTo(map).bindPopup(`${data.label}: ${data.moistureValue}% Moisture`);\n\n                    // Small circle to represent the sensor itself\n                    L.circleMarker([data.lat, data.lon], {\n                        radius: 5,\n                        fillColor: colorMap[data.type],\n                        color: \"black\",\n                        fillOpacity: 1,\n                        stroke: false,\n                    }).addTo(map);\n                }\n            });\n\n            // Create legend items dynamically\n            const legendData = Array.from(uniqueTypes).map(type => ({\n                type,\n                color: colorMap[type] || \"gray\" // Fallback color\n            }));\n\n            setLegendItems(legendData);\n\n            // Fit the map to the farmland bounds if available\n            if (farmlandBounds) {\n                map.fitBounds(farmlandBounds);\n            } else {\n                // Optionally fit bounds to all other markers\n                const bounds = L.latLngBounds(\n                    jsonData.mapData.filter((loc) => loc.type !== \"farmland\").map((loc) => [loc.lat, loc.lon])\n                );\n                map.fitBounds(bounds);\n            }\n\n            // Cleanup on component unmount\n            return () => {\n                map.remove();\n            };\n        }\n    }, []);\n\n    return (\n        <div ref={scrollerRef} className=\"borderring p-0\" style={{ overflow: \"hidden\", scrollbarWidth: \"none\", msOverflowStyle: \"none\" }}>\n            <div className=\"borderring\" style={{ position: \"relative\", border: 'none' }}>\n                <h6 className=\"text-secondary\" style={{ zIndex: 2, position: \"relative\", top: '0px', left: '0px' }}>Field Overview</h6>\n                <div\n                    ref={mapRef}\n                    style={{\n                        width: \"100%\",\n                        height: \"445px\",\n                        scale: \"1.45\",\n                        overflow: \"hidden\",\n                        position: \"relative\"\n                    }}\n                >\n                </div>\n\n                {/* Dynamic Legend */}\n                <div style={{\n                    position: \"absolute\",\n                    top: \"10px\",\n                    right: \"10px\",\n                    backgroundColor: \"white\",\n                    padding: \"6px\",\n                    borderRadius: \"5px\",\n                    boxShadow: \"0 0 5px rgba(0,0,0,0.5)\",\n                    zIndex: 10,\n                }}>\n                    {legendItems.map((item) => (\n                        <div key={item.type} style={{ display: \"flex\", alignItems: \"center\" }}>\n                            <div style={{ width: \"10px\", height: \"10px\", backgroundColor: item.color, marginRight: \"5px\" }}></div>\n                            <span style={{fontSize:'13px'}}>{item.type.charAt(0).toUpperCase() + item.type.slice(1)}</span>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}