{"ast":null,"code":"var _jsxFileName = \"/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  data\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const [legendItems, setLegendItems] = useState([]);\n  useEffect(() => {\n    if (mapRef.current) {\n      const map = L.map(mapRef.current).setView([16.22525, 74.8424], 25);\n\n      // Add free satellite tiles from MapTiler (replace `YOUR_API_KEY`)\n      L.tileLayer(`https://api.maptiler.com/maps/hybrid/{z}/{x}/{y}.jpg?key=duuE6Utx7bChCc2hE9N1`, {\n        attribution: '&copy; MapTiler &copy; OpenStreetMap contributors',\n        maxZoom: 26,\n        minZoom: 2\n      }).addTo(map);\n\n      // Color mappings\n      const colorMap = {\n        farmland: \"green\",\n        valve: \"orange\",\n        moisture: \"blue\",\n        npk: \"red\"\n      };\n\n      // Handle farmland polygon\n      const farmlandCoordinates = data.farmlocation.farm_loc.map(loc => {\n        const [lat, lon] = loc.split(\",\").map(Number);\n        return [lat, lon];\n      });\n      const farmlandLayer = L.polygon(farmlandCoordinates, {\n        color: colorMap.farmland\n      }).addTo(map);\n      farmlandLayer.bindPopup(\"Farmland Area\");\n\n      // Fit map to the farmland bounds\n      const farmlandBounds = L.latLngBounds(farmlandCoordinates);\n      map.fitBounds(farmlandBounds);\n\n      // Unique types for legend\n      const uniqueTypes = new Set();\n\n      // Handle sensor locations\n      data.sensorlocation.forEach(sensor => {\n        uniqueTypes.add(sensor.device_name);\n        const [lat, lon] = sensor.device_location.split(\",\").map(Number);\n        const color = colorMap[sensor.device_name] || \"gray\";\n        if (sensor.device_name === \"moisture\") {\n          L.circleMarker([lat, lon], {\n            radius: 5,\n            fillColor: color,\n            color: \"black\",\n            fillOpacity: 1,\n            stroke: false\n          }).addTo(map).bindPopup(`${sensor.device_name}: ${sensor.section_id}`);\n        } else if (sensor.device_name === \"valve\") {\n          L.circleMarker([lat, lon], {\n            radius: 8,\n            fillColor: color,\n            color: color,\n            fillOpacity: 0.6,\n            weight: 2\n          }).addTo(map).bindPopup(`${sensor.device_name}: ${sensor.section_id}`);\n        }\n      });\n\n      // Handle farm device locations\n      data.farmdevicelocation.forEach(device => {\n        uniqueTypes.add(device.device_name);\n        const [lat, lon] = device.device_location.split(\",\").map(Number);\n        const color = colorMap[device.device_name] || \"gray\";\n        L.circleMarker([lat, lon], {\n          radius: 6,\n          fillColor: color,\n          color: color,\n          fillOpacity: 1,\n          weight: 1\n        }).addTo(map).bindPopup(`${device.device_name}: ${device.farm_device_id}`);\n      });\n\n      // Legend items\n      const legendData = Array.from(uniqueTypes).map(type => ({\n        type,\n        color: colorMap[type] || \"gray\"\n      }));\n      setLegendItems(legendData);\n\n      // Cleanup on unmount\n      return () => {\n        map.remove();\n      };\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        width: \"100%\",\n        height: \"445px\",\n        scale: '1.25'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: \"10px\",\n        right: \"10px\",\n        backgroundColor: \"white\",\n        padding: \"6px\",\n        borderRadius: \"5px\",\n        boxShadow: \"0 0 5px rgba(0,0,0,0.5)\",\n        zIndex: 10\n      },\n      children: legendItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          alignItems: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"10px\",\n            height: \"10px\",\n            backgroundColor: item.color,\n            marginRight: \"5px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '13px'\n          },\n          children: item.type.charAt(0).toUpperCase() + item.type.slice(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this)]\n      }, item.type, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n_s(Map, \"5rTJLjj8uCt4A74gnoRlyaXVi0Y=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","jsxDEV","_jsxDEV","Map","data","_s","mapRef","legendItems","setLegendItems","current","map","setView","tileLayer","attribution","maxZoom","minZoom","addTo","colorMap","farmland","valve","moisture","npk","farmlandCoordinates","farmlocation","farm_loc","loc","lat","lon","split","Number","farmlandLayer","polygon","color","bindPopup","farmlandBounds","latLngBounds","fitBounds","uniqueTypes","Set","sensorlocation","forEach","sensor","add","device_name","device_location","circleMarker","radius","fillColor","fillOpacity","stroke","section_id","weight","farmdevicelocation","device","farm_device_id","legendData","Array","from","type","remove","style","position","overflow","children","ref","width","height","scale","fileName","_jsxFileName","lineNumber","columnNumber","top","right","backgroundColor","padding","borderRadius","boxShadow","zIndex","item","display","alignItems","marginRight","fontSize","charAt","toUpperCase","slice","_c","$RefreshReg$"],"sources":["/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\n\nconst Map = ({ data }) => {\n    const mapRef = useRef(null);\n    const [legendItems, setLegendItems] = useState([]);\n\n    useEffect(() => {\n        if (mapRef.current) {\n            const map = L.map(mapRef.current).setView([16.22525, 74.8424], 25);\n\n            // Add free satellite tiles from MapTiler (replace `YOUR_API_KEY`)\n            L.tileLayer(\n                `https://api.maptiler.com/maps/hybrid/{z}/{x}/{y}.jpg?key=duuE6Utx7bChCc2hE9N1`,\n                {\n                    attribution: '&copy; MapTiler &copy; OpenStreetMap contributors',\n                    maxZoom: 26,\n                    minZoom: 2,\n                }\n            ).addTo(map);\n\n            // Color mappings\n            const colorMap = {\n                farmland: \"green\",\n                valve: \"orange\",\n                moisture: \"blue\",\n                npk: \"red\",\n            };\n\n            // Handle farmland polygon\n            const farmlandCoordinates = data.farmlocation.farm_loc.map((loc) => {\n                const [lat, lon] = loc.split(\",\").map(Number);\n                return [lat, lon];\n            });\n            const farmlandLayer = L.polygon(farmlandCoordinates, {\n                color: colorMap.farmland,\n            }).addTo(map);\n            farmlandLayer.bindPopup(\"Farmland Area\");\n\n            // Fit map to the farmland bounds\n            const farmlandBounds = L.latLngBounds(farmlandCoordinates);\n            map.fitBounds(farmlandBounds);\n\n            // Unique types for legend\n            const uniqueTypes = new Set();\n\n            // Handle sensor locations\n            data.sensorlocation.forEach((sensor) => {\n                uniqueTypes.add(sensor.device_name);\n                const [lat, lon] = sensor.device_location.split(\",\").map(Number);\n                const color = colorMap[sensor.device_name] || \"gray\";\n\n                if (sensor.device_name === \"moisture\") {\n                    L.circleMarker([lat, lon], {\n                        radius: 5,\n                        fillColor: color,\n                        color: \"black\",\n                        fillOpacity: 1,\n                        stroke: false,\n                    }).addTo(map).bindPopup(`${sensor.device_name}: ${sensor.section_id}`);\n                } else if (sensor.device_name === \"valve\") {\n                    L.circleMarker([lat, lon], {\n                        radius: 8,\n                        fillColor: color,\n                        color: color,\n                        fillOpacity: 0.6,\n                        weight: 2,\n                    }).addTo(map).bindPopup(`${sensor.device_name}: ${sensor.section_id}`);\n                }\n            });\n\n            // Handle farm device locations\n            data.farmdevicelocation.forEach((device) => {\n                uniqueTypes.add(device.device_name);\n                const [lat, lon] = device.device_location.split(\",\").map(Number);\n                const color = colorMap[device.device_name] || \"gray\";\n\n                L.circleMarker([lat, lon], {\n                    radius: 6,\n                    fillColor: color,\n                    color: color,\n                    fillOpacity: 1,\n                    weight: 1,\n                }).addTo(map).bindPopup(`${device.device_name}: ${device.farm_device_id}`);\n            });\n\n            // Legend items\n            const legendData = Array.from(uniqueTypes).map((type) => ({\n                type,\n                color: colorMap[type] || \"gray\",\n            }));\n            setLegendItems(legendData);\n\n            // Cleanup on unmount\n            return () => {\n                map.remove();\n            };\n        }\n    }, [data]);\n\n    return (\n        <div style={{ position: \"relative\" ,overflow:'hidden'}} >\n            <div ref={mapRef} style={{ width: \"100%\", height: \"445px\" ,scale:'1.25'}}></div>\n            <div style={{\n                position: \"absolute\",\n                top: \"10px\",\n                right: \"10px\",\n                backgroundColor: \"white\",\n                padding: \"6px\",\n                borderRadius: \"5px\",\n                boxShadow: \"0 0 5px rgba(0,0,0,0.5)\",\n                zIndex: 10,\n            }}>\n                {legendItems.map((item) => (\n                    <div key={item.type} style={{ display: \"flex\", alignItems: \"center\" }}>\n                        <div style={{ width: \"10px\", height: \"10px\", backgroundColor: item.color, marginRight: \"5px\" }}></div>\n                        <span style={{ fontSize: '13px' }}>{item.type.charAt(0).toUpperCase() + item.type.slice(1)}</span>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}