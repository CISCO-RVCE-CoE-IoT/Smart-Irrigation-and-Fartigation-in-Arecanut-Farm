{"ast":null,"code":"var _jsxFileName = \"/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport 'leaflet/dist/leaflet.css';\nimport campass from './WeatherImages/campass.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapContainer = ({\n  collected_data\n}) => {\n  _s();\n  const locationCoordinates = collected_data === null || collected_data === void 0 ? void 0 : collected_data.location_coordinates;\n  const device_values = collected_data === null || collected_data === void 0 ? void 0 : collected_data.device_values;\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null); // Ref to store the map instance\n  const [legendItems, setLegendItems] = useState([]);\n  const scrollerRef = useRef(null);\n\n  // Handle horizontal scrolling\n  useEffect(() => {\n    const handleWheel = event => {\n      event.preventDefault();\n      if (scrollerRef.current) {\n        scrollerRef.current.scrollLeft += event.deltaY;\n      }\n    };\n    const scroller = scrollerRef.current;\n    if (scroller) {\n      scroller.addEventListener(\"wheel\", handleWheel, {\n        passive: false\n      });\n    }\n    return () => {\n      if (scroller) {\n        scroller.removeEventListener(\"wheel\", handleWheel);\n      }\n    };\n  }, []);\n  useEffect(() => {\n    var _locationCoordinates$, _device_values$moistu, _locationCoordinates$2, _locationCoordinates$3;\n    // console.log(\"Initializing map with coordinates\", locationCoordinates);\n\n    // Check if locationCoordinates and device_values are available\n    if (!locationCoordinates || !device_values || !mapRef.current) return;\n\n    // console.log(\"Map container available, initializing...\");\n\n    // Clean up existing map instance if any\n    if (mapInstance.current) {\n      mapInstance.current.remove();\n    }\n\n    // Initialize map with default position\n    mapInstance.current = L.map(mapRef.current).setView([16.22525, 74.8424], 16);\n\n    // Add tile layer to the map\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      maxZoom: 27,\n      minZoom: 2\n    }).addTo(mapInstance.current);\n\n    // Color map for different device types\n    const colorMap = {\n      farmland: \"green\",\n      valve: \"orange\",\n      moisture: \"darkblue\",\n      npk: \"red\"\n    };\n\n    // Ensure farm coordinates are parsed correctly\n    const farmlandCoordinates = ((_locationCoordinates$ = locationCoordinates.farm_coordinates) === null || _locationCoordinates$ === void 0 ? void 0 : _locationCoordinates$.map(coord => {\n      const [lat, lon] = coord.split(\",\").map(Number); // Parse as numbers\n      return [lat, lon];\n    })) || [];\n    if (farmlandCoordinates.length === 0) {\n      console.warn(\"No valid farmland coordinates found.\");\n    }\n\n    // Create farmland polygon if coordinates exist\n    const farmlandLayer = L.polygon(farmlandCoordinates, {\n      color: colorMap.farmland\n    }).addTo(mapInstance.current);\n    farmlandLayer.bindPopup(\"Farmland Area\");\n\n    // Mapping moisture values\n    const moistureValuesMap = new Map();\n    device_values === null || device_values === void 0 ? void 0 : (_device_values$moistu = device_values.moisture_device_value) === null || _device_values$moistu === void 0 ? void 0 : _device_values$moistu.forEach(({\n      section_device_id,\n      moisture_value\n    }) => {\n      moistureValuesMap.set(section_device_id, moisture_value);\n    });\n    const uniqueDeviceMarkers = [];\n\n    // Adding markers for section devices\n    (_locationCoordinates$2 = locationCoordinates.section_device) === null || _locationCoordinates$2 === void 0 ? void 0 : _locationCoordinates$2.forEach(device => {\n      var _device$device_locati;\n      const [lat, lon] = ((_device$device_locati = device.device_location) === null || _device$device_locati === void 0 ? void 0 : _device$device_locati.split(\",\").map(Number)) || [];\n      if (lat && lon && isWithinBounds([lat, lon], farmlandCoordinates)) {\n        const sensorMarker = L.circleMarker([lat, lon], {\n          radius: 3,\n          fillColor: \"black\",\n          color: \"black\",\n          fillOpacity: 1,\n          weight: 1\n        }).bindPopup(`${device.device_name.charAt(0).toUpperCase() + device.device_name.slice(1)} Sensor`);\n        uniqueDeviceMarkers.push(sensorMarker);\n\n        // Add moisture sensor markers with dynamic radius\n        if (device.device_name === \"moisture\") {\n          const moistureValue = moistureValuesMap.get(device.section_device_id) || 0;\n          const moistureRadius = moistureValue * 0.05;\n          const moistureCircle = L.circle([lat, lon], {\n            radius: moistureRadius,\n            fillColor: colorMap.moisture,\n            color: colorMap.moisture,\n            fillOpacity: 0.4,\n            weight: 1\n          }).bindPopup(`Moisture Sensor in ${device.section_name}<br/>Value: ${moistureValue}`);\n          uniqueDeviceMarkers.push(moistureCircle);\n        }\n        // Add valve markers\n        else if (device.device_name === \"valve\") {\n          var _device_values$valve_;\n          const valveStatus = device_values === null || device_values === void 0 ? void 0 : (_device_values$valve_ = device_values.valve_devices_data) === null || _device_values$valve_ === void 0 ? void 0 : _device_values$valve_.find(v => v.section_device_id === device.section_device_id);\n          const valveColor = (valveStatus === null || valveStatus === void 0 ? void 0 : valveStatus.valve_status) === \"on\" ? \"green\" : \"red\";\n          const valveMarker = L.circleMarker([lat, lon], {\n            radius: 8,\n            fillColor: valveColor,\n            color: valveColor,\n            fillOpacity: 0.6,\n            weight: 2\n          }).bindPopup(`Valve in ${device.section_name}`);\n          uniqueDeviceMarkers.push(valveMarker);\n        }\n      }\n    });\n\n    // Adding markers for farm devices (e.g., NPK devices)\n    (_locationCoordinates$3 = locationCoordinates.farm_device) === null || _locationCoordinates$3 === void 0 ? void 0 : _locationCoordinates$3.forEach(device => {\n      var _device$device_locati2;\n      const [lat, lon] = ((_device$device_locati2 = device.device_location) === null || _device$device_locati2 === void 0 ? void 0 : _device$device_locati2.split(\",\").map(Number)) || [];\n      if (lat && lon && isWithinBounds([lat, lon], farmlandCoordinates)) {\n        const npkMarker = L.circleMarker([lat, lon], {\n          radius: 5,\n          fillColor: colorMap.npk,\n          color: colorMap.npk,\n          fillOpacity: 1,\n          stroke: false\n        }).bindPopup(`NPK Device: ${device.device_name}`);\n        uniqueDeviceMarkers.push(npkMarker);\n      }\n    });\n\n    // Add all markers to the map\n    uniqueDeviceMarkers.forEach(marker => marker.addTo(mapInstance.current));\n\n    // Update the map's bounds to include all the markers\n    const bounds = L.latLngBounds(farmlandCoordinates);\n    uniqueDeviceMarkers.forEach(marker => bounds.extend(marker.getLatLng()));\n\n    // Fit map to the bounds of the farmland and markers\n    mapInstance.current.fitBounds(bounds);\n\n    // Update legend with sensor types\n    const legendData = [{\n      type: \"moisture\",\n      color: colorMap.moisture\n    }, {\n      type: \"valve\",\n      color: \"orange\"\n    }, {\n      type: \"npk\",\n      color: colorMap.npk\n    }];\n    setLegendItems(legendData);\n  }, [locationCoordinates, device_values]);\n\n  // Function to check if coordinates are within the farmland bounds\n  const isWithinBounds = (coordinates, farmlandCoordinates) => {\n    const polygon = L.polygon(farmlandCoordinates);\n    return polygon.getBounds().contains(coordinates);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: scrollerRef,\n    className: \"borderring p-0\",\n    style: {\n      overflow: \"hidden\",\n      scrollbarWidth: \"none\",\n      msOverflowStyle: \"none\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"borderring\",\n      style: {\n        position: \"relative\",\n        border: 'none'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"text-secondary\",\n        style: {\n          zIndex: 2,\n          position: \"relative\",\n          top: '0px',\n          left: '0px'\n        },\n        children: \"Field Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mapRef,\n        style: {\n          width: \"100%\",\n          height: \"445px\",\n          scale: \"1.45\",\n          overflow: \"hidden\",\n          position: \"relative\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: \"10px\",\n          right: \"10px\",\n          backgroundColor: \"white\",\n          padding: \"6px\",\n          borderRadius: \"5px\",\n          boxShadow: \"0 0 5px rgba(0,0,0,0.5)\",\n          zIndex: 10\n        },\n        children: [legendItems.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"10px\",\n              height: \"10px\",\n              backgroundColor: item.color,\n              marginRight: \"5px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: '13px'\n            },\n            children: item.type.charAt(0).toUpperCase() + item.type.slice(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 29\n          }, this)]\n        }, item.type, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: campass,\n          width: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontSize: '13px'\n          },\n          children: \"Campass\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 54\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 9\n  }, this);\n};\n_s(MapContainer, \"X3Fs5Fc15gsk24cNNeYsIIz4aHo=\");\n_c = MapContainer;\nexport default MapContainer;\nvar _c;\n$RefreshReg$(_c, \"MapContainer\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","campass","jsxDEV","_jsxDEV","MapContainer","collected_data","_s","locationCoordinates","location_coordinates","device_values","mapRef","mapInstance","legendItems","setLegendItems","scrollerRef","handleWheel","event","preventDefault","current","scrollLeft","deltaY","scroller","addEventListener","passive","removeEventListener","_locationCoordinates$","_device_values$moistu","_locationCoordinates$2","_locationCoordinates$3","remove","map","setView","tileLayer","maxZoom","minZoom","addTo","colorMap","farmland","valve","moisture","npk","farmlandCoordinates","farm_coordinates","coord","lat","lon","split","Number","length","console","warn","farmlandLayer","polygon","color","bindPopup","moistureValuesMap","Map","moisture_device_value","forEach","section_device_id","moisture_value","set","uniqueDeviceMarkers","section_device","device","_device$device_locati","device_location","isWithinBounds","sensorMarker","circleMarker","radius","fillColor","fillOpacity","weight","device_name","charAt","toUpperCase","slice","push","moistureValue","get","moistureRadius","moistureCircle","circle","section_name","_device_values$valve_","valveStatus","valve_devices_data","find","v","valveColor","valve_status","valveMarker","farm_device","_device$device_locati2","npkMarker","stroke","marker","bounds","latLngBounds","extend","getLatLng","fitBounds","legendData","type","coordinates","getBounds","contains","ref","className","style","overflow","scrollbarWidth","msOverflowStyle","children","position","border","zIndex","top","left","fileName","_jsxFileName","lineNumber","columnNumber","width","height","scale","right","backgroundColor","padding","borderRadius","boxShadow","item","display","alignItems","marginRight","fontSize","src","_c","$RefreshReg$"],"sources":["/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport L from \"leaflet\";\nimport 'leaflet/dist/leaflet.css';\nimport campass from './WeatherImages/campass.png';\n\nconst MapContainer = ({ collected_data }) => {\n\n    const locationCoordinates = collected_data?.location_coordinates;\n    const device_values = collected_data?.device_values;\n\n    const mapRef = useRef(null);\n    const mapInstance = useRef(null);  // Ref to store the map instance\n    const [legendItems, setLegendItems] = useState([]);\n    const scrollerRef = useRef(null);\n\n    // Handle horizontal scrolling\n    useEffect(() => {\n        const handleWheel = (event) => {\n            event.preventDefault();\n            if (scrollerRef.current) {\n                scrollerRef.current.scrollLeft += event.deltaY;\n            }\n        };\n\n        const scroller = scrollerRef.current;\n        if (scroller) {\n            scroller.addEventListener(\"wheel\", handleWheel, { passive: false });\n        }\n\n        return () => {\n            if (scroller) {\n                scroller.removeEventListener(\"wheel\", handleWheel);\n            }\n        };\n    }, []);\n\n    useEffect(() => {\n        // console.log(\"Initializing map with coordinates\", locationCoordinates);\n    \n        // Check if locationCoordinates and device_values are available\n        if (!locationCoordinates || !device_values || !mapRef.current) return;\n    \n        // console.log(\"Map container available, initializing...\");\n    \n        // Clean up existing map instance if any\n        if (mapInstance.current) {\n            mapInstance.current.remove();\n        }\n    \n        // Initialize map with default position\n        mapInstance.current = L.map(mapRef.current).setView([16.22525, 74.8424], 16);\n    \n        // Add tile layer to the map\n        L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n            maxZoom: 27,\n            minZoom: 2,\n        }).addTo(mapInstance.current);\n    \n        // Color map for different device types\n        const colorMap = {\n            farmland: \"green\",\n            valve: \"orange\",\n            moisture: \"darkblue\",\n            npk: \"red\",\n        };\n    \n        // Ensure farm coordinates are parsed correctly\n        const farmlandCoordinates = locationCoordinates.farm_coordinates?.map(coord => {\n            const [lat, lon] = coord.split(\",\").map(Number); // Parse as numbers\n            return [lat, lon];\n        }) || [];\n    \n        if (farmlandCoordinates.length === 0) {\n            console.warn(\"No valid farmland coordinates found.\");\n        }\n    \n        // Create farmland polygon if coordinates exist\n        const farmlandLayer = L.polygon(farmlandCoordinates, { color: colorMap.farmland }).addTo(mapInstance.current);\n        farmlandLayer.bindPopup(\"Farmland Area\");\n    \n        // Mapping moisture values\n        const moistureValuesMap = new Map();\n        device_values?.moisture_device_value?.forEach(({ section_device_id, moisture_value }) => {\n            moistureValuesMap.set(section_device_id, moisture_value);\n        });\n    \n        const uniqueDeviceMarkers = [];\n    \n        // Adding markers for section devices\n        locationCoordinates.section_device?.forEach(device => {\n            const [lat, lon] = device.device_location?.split(\",\").map(Number) || [];\n            if (lat && lon && isWithinBounds([lat, lon], farmlandCoordinates)) {\n                const sensorMarker = L.circleMarker([lat, lon], {\n                    radius: 3,\n                    fillColor: \"black\",\n                    color: \"black\",\n                    fillOpacity: 1,\n                    weight: 1,\n                }).bindPopup(`${device.device_name.charAt(0).toUpperCase() + device.device_name.slice(1)} Sensor`);\n    \n                uniqueDeviceMarkers.push(sensorMarker);\n    \n                // Add moisture sensor markers with dynamic radius\n                if (device.device_name === \"moisture\") {\n                    const moistureValue = moistureValuesMap.get(device.section_device_id) || 0;\n                    const moistureRadius = moistureValue * 0.05;\n    \n                    const moistureCircle = L.circle([lat, lon], {\n                        radius: moistureRadius,\n                        fillColor: colorMap.moisture,\n                        color: colorMap.moisture,\n                        fillOpacity: 0.4,\n                        weight: 1,\n                    }).bindPopup(`Moisture Sensor in ${device.section_name}<br/>Value: ${moistureValue}`);\n                    uniqueDeviceMarkers.push(moistureCircle);\n                }\n                // Add valve markers\n                else if (device.device_name === \"valve\") {\n                    const valveStatus = device_values?.valve_devices_data?.find(v => v.section_device_id === device.section_device_id);\n                    const valveColor = valveStatus?.valve_status === \"on\" ? \"green\" : \"red\";\n    \n                    const valveMarker = L.circleMarker([lat, lon], {\n                        radius: 8,\n                        fillColor: valveColor,\n                        color: valveColor,\n                        fillOpacity: 0.6,\n                        weight: 2,\n                    }).bindPopup(`Valve in ${device.section_name}`);\n                    uniqueDeviceMarkers.push(valveMarker);\n                }\n            }\n        });\n    \n        // Adding markers for farm devices (e.g., NPK devices)\n        locationCoordinates.farm_device?.forEach(device => {\n            const [lat, lon] = device.device_location?.split(\",\").map(Number) || [];\n            if (lat && lon && isWithinBounds([lat, lon], farmlandCoordinates)) {\n                const npkMarker = L.circleMarker([lat, lon], {\n                    radius: 5,\n                    fillColor: colorMap.npk,\n                    color: colorMap.npk,\n                    fillOpacity: 1,\n                    stroke: false,\n                }).bindPopup(`NPK Device: ${device.device_name}`);\n                uniqueDeviceMarkers.push(npkMarker);\n            }\n        });\n    \n        // Add all markers to the map\n        uniqueDeviceMarkers.forEach(marker => marker.addTo(mapInstance.current));\n    \n        // Update the map's bounds to include all the markers\n        const bounds = L.latLngBounds(farmlandCoordinates);\n        uniqueDeviceMarkers.forEach(marker => bounds.extend(marker.getLatLng()));\n    \n        // Fit map to the bounds of the farmland and markers\n        mapInstance.current.fitBounds(bounds);\n    \n        // Update legend with sensor types\n        const legendData = [\n            { type: \"moisture\", color: colorMap.moisture },\n            { type: \"valve\", color: \"orange\" },\n            { type: \"npk\", color: colorMap.npk },\n        ];\n        setLegendItems(legendData);\n    \n    }, [locationCoordinates, device_values]);\n    \n\n    // Function to check if coordinates are within the farmland bounds\n    const isWithinBounds = (coordinates, farmlandCoordinates) => {\n        const polygon = L.polygon(farmlandCoordinates);\n        return polygon.getBounds().contains(coordinates);\n    };\n\n    return (\n        <div ref={scrollerRef} className=\"borderring p-0\" style={{ overflow: \"hidden\", scrollbarWidth: \"none\", msOverflowStyle: \"none\" }}>\n            <div className=\"borderring\" style={{ position: \"relative\", border: 'none' }}>\n                <h6 className=\"text-secondary\" style={{ zIndex: 2, position: \"relative\", top: '0px', left: '0px' }}>Field Overview</h6>\n                <div\n                    ref={mapRef}\n                    style={{\n                        width: \"100%\",\n                        height: \"445px\",\n                        scale: \"1.45\",\n                        overflow: \"hidden\",\n                        position: \"relative\"\n                    }}\n                >\n                </div>\n\n                <div style={{\n                    position: \"absolute\",\n                    top: \"10px\",\n                    right: \"10px\",\n                    backgroundColor: \"white\",\n                    padding: \"6px\",\n                    borderRadius: \"5px\",\n                    boxShadow: \"0 0 5px rgba(0,0,0,0.5)\",\n                    zIndex: 10,\n                }}>\n                    {legendItems.map((item) => (\n                        <div key={item.type} style={{ display: \"flex\", alignItems: \"center\" }}>\n                            <div style={{ width: \"10px\", height: \"10px\", backgroundColor: item.color, marginRight: \"5px\" }}></div>\n                            <span style={{ fontSize: '13px' }}>{item.type.charAt(0).toUpperCase() + item.type.slice(1)}</span>\n                        </div>\n                    ))}\n                    <img src={campass} width={20} /> <span style={{ fontSize: '13px' }}>Campass</span>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default MapContainer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}