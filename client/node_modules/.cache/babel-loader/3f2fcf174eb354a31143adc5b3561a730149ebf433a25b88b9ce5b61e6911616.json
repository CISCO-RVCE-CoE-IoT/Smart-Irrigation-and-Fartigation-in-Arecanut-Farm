{"ast":null,"code":"var _jsxFileName = \"/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/logsGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = '8925502a781648f4443f9e01d96c7ff5';\nconst apiURL = 'https://api.openweathermap.org/data/2.5/weather?units=metric&lat=';\nconst timeAgo = timestamp => {\n  const now = new Date();\n  const diff = now - new Date(timestamp);\n  const minutes = Math.floor(diff / 1000 / 60);\n  const hours = Math.floor(diff / 1000 / 60 / 60);\n  const days = Math.floor(diff / 1000 / 60 / 60 / 24);\n  if (days > 0) return `${days} d${days > 1 ? 's' : ''} ago`;\n  if (hours > 0) return `${hours} hr${hours > 1 ? 's' : ''} ago`;\n  return `${minutes} min${minutes > 1 ? 's' : ''} ago`;\n};\nconst LogsGenerator = ({\n  data\n}) => {\n  _s();\n  const [logs, setLogs] = useState([]);\n  useEffect(() => {\n    var _data$device_values, _data$device_values2, _data$device_values3, _data$location_coordi;\n    if (!data) return;\n    const generatedLogs = [];\n    const weatherDataCache = new Set();\n    const npkCache = new Set();\n    const valveCache = new Set();\n    const moistureCache = new Set();\n    const fetchWeatherData = async coordinates => {\n      const [lat, lon] = coordinates.split(',').map(coord => parseFloat(coord.trim()));\n      const weatherData = await fetch(`${apiURL}${lat}&lon=${lon}&appid=${apiKey}`).then(response => response.json()).catch(err => console.error(err));\n      if (weatherData && weatherData.weather) {\n        const weatherDescription = weatherData.weather[0].description;\n        const temperature = weatherData.main.temp;\n        const cacheKey = `${coordinates}_${weatherDescription}_${temperature}`;\n        if (!weatherDataCache.has(cacheKey)) {\n          weatherDataCache.add(cacheKey);\n          generatedLogs.push({\n            title: `Weather Prediction: ${weatherDescription}, Temp: ${temperature}°C`,\n            timestamp: new Date().toISOString()\n          });\n          if (temperature > 35) {\n            generatedLogs.push({\n              title: `Extreme Heat Alert: Temp ${temperature}°C`,\n              timestamp: new Date().toISOString()\n            });\n          } else if (temperature < 5) {\n            generatedLogs.push({\n              title: `Extreme Cold Alert: Temp ${temperature}°C`,\n              timestamp: new Date().toISOString()\n            });\n          }\n        }\n      }\n    };\n    if ((_data$device_values = data.device_values) !== null && _data$device_values !== void 0 && _data$device_values.farm_device_data) {\n      data.device_values.farm_device_data.forEach(device => {\n        const npkKey = `NPK_${device.farm_device_id}_${device.timestamp}`;\n        if (!npkCache.has(npkKey)) {\n          npkCache.add(npkKey);\n          generatedLogs.push({\n            title: `NPK Levels - N: ${device.nitrogen}, P: ${device.phosphorus || 'null'}, K: ${device.potassium}`,\n            timestamp: device.timestamp\n          });\n        }\n      });\n    }\n    if ((_data$device_values2 = data.device_values) !== null && _data$device_values2 !== void 0 && _data$device_values2.valve_devices_data) {\n      data.device_values.valve_devices_data.forEach(valve => {\n        const valveKey = `Valve_${valve.section_id}_${valve.valve_timestamp}`;\n        if (!valveCache.has(valveKey)) {\n          valveCache.add(valveKey);\n          generatedLogs.push({\n            title: `Valve Status for ${valve.section_name}: ${valve.valve_status} (Mode: ${valve.valve_mode})`,\n            timestamp: valve.valve_timestamp\n          });\n        }\n      });\n    }\n    if ((_data$device_values3 = data.device_values) !== null && _data$device_values3 !== void 0 && _data$device_values3.moisture_device_value) {\n      data.device_values.moisture_device_value.filter(moisture => moisture.moisture_value <= 30 || moisture.moisture_value >= 80).forEach(moisture => {\n        const moistureKey = `Moisture_${moisture.section_id}_${moisture.timestamp}`;\n        if (!moistureCache.has(moistureKey)) {\n          moistureCache.add(moistureKey);\n          generatedLogs.push({\n            title: `Extreme Moisture for Section ${moisture.section_id}: ${moisture.moisture_value}%`,\n            timestamp: moisture.timestamp\n          });\n        }\n      });\n    }\n    if ((_data$location_coordi = data.location_coordinates) !== null && _data$location_coordi !== void 0 && _data$location_coordi.farm_coordinates) {\n      Promise.all(data.location_coordinates.farm_coordinates.map(coord => fetchWeatherData(coord))).then(() => setLogs(generatedLogs));\n    } else {\n      setLogs(generatedLogs);\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"borderring p-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"text-secondary\",\n      style: {\n        fontSize: '14px'\n      },\n      children: \"Logs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-hover\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              fontSize: '0.875rem'\n            },\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              fontSize: '0.875rem'\n            },\n            children: \"Time Ago\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              fontSize: '0.875rem'\n            },\n            children: log.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              fontSize: '0.875rem'\n            },\n            children: timeAgo(log.timestamp)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(LogsGenerator, \"6h9FKNtuyCQaVwwdLqmS9omOzEQ=\");\n_c = LogsGenerator;\nexport default LogsGenerator;\nvar _c;\n$RefreshReg$(_c, \"LogsGenerator\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","apiKey","apiURL","timeAgo","timestamp","now","Date","diff","minutes","Math","floor","hours","days","LogsGenerator","data","_s","logs","setLogs","_data$device_values","_data$device_values2","_data$device_values3","_data$location_coordi","generatedLogs","weatherDataCache","Set","npkCache","valveCache","moistureCache","fetchWeatherData","coordinates","lat","lon","split","map","coord","parseFloat","trim","weatherData","fetch","then","response","json","catch","err","console","error","weather","weatherDescription","description","temperature","main","temp","cacheKey","has","add","push","title","toISOString","device_values","farm_device_data","forEach","device","npkKey","farm_device_id","nitrogen","phosphorus","potassium","valve_devices_data","valve","valveKey","section_id","valve_timestamp","section_name","valve_status","valve_mode","moisture_device_value","filter","moisture","moisture_value","moistureKey","location_coordinates","farm_coordinates","Promise","all","className","children","style","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","log","index","_c","$RefreshReg$"],"sources":["/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/logsGenerator.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst apiKey = '8925502a781648f4443f9e01d96c7ff5';\nconst apiURL = 'https://api.openweathermap.org/data/2.5/weather?units=metric&lat=';\n\nconst timeAgo = (timestamp) => {\n  const now = new Date();\n  const diff = now - new Date(timestamp);\n  const minutes = Math.floor(diff / 1000 / 60);\n  const hours = Math.floor(diff / 1000 / 60 / 60);\n  const days = Math.floor(diff / 1000 / 60 / 60 / 24);\n\n  if (days > 0) return `${days} d${days > 1 ? 's' : ''} ago`;\n  if (hours > 0) return `${hours} hr${hours > 1 ? 's' : ''} ago`;\n  return `${minutes} min${minutes > 1 ? 's' : ''} ago`;\n};\n\nconst LogsGenerator = ({ data }) => {\n  const [logs, setLogs] = useState([]);\n\n  useEffect(() => {\n    if (!data) return;\n\n    const generatedLogs = [];\n    const weatherDataCache = new Set();\n    const npkCache = new Set();\n    const valveCache = new Set();\n    const moistureCache = new Set();\n\n    const fetchWeatherData = async (coordinates) => {\n      const [lat, lon] = coordinates.split(',').map(coord => parseFloat(coord.trim()));\n      const weatherData = await fetch(`${apiURL}${lat}&lon=${lon}&appid=${apiKey}`)\n        .then(response => response.json())\n        .catch(err => console.error(err));\n      \n      if (weatherData && weatherData.weather) {\n        const weatherDescription = weatherData.weather[0].description;\n        const temperature = weatherData.main.temp;\n        const cacheKey = `${coordinates}_${weatherDescription}_${temperature}`;\n        \n        if (!weatherDataCache.has(cacheKey)) {\n          weatherDataCache.add(cacheKey);\n          generatedLogs.push({\n            title: `Weather Prediction: ${weatherDescription}, Temp: ${temperature}°C`,\n            timestamp: new Date().toISOString(),\n          });\n          \n          if (temperature > 35) {\n            generatedLogs.push({\n              title: `Extreme Heat Alert: Temp ${temperature}°C`,\n              timestamp: new Date().toISOString(),\n            });\n          } else if (temperature < 5) {\n            generatedLogs.push({\n              title: `Extreme Cold Alert: Temp ${temperature}°C`,\n              timestamp: new Date().toISOString(),\n            });\n          }\n        }\n      }\n    };\n\n    if (data.device_values?.farm_device_data) {\n      data.device_values.farm_device_data.forEach((device) => {\n        const npkKey = `NPK_${device.farm_device_id}_${device.timestamp}`;\n        if (!npkCache.has(npkKey)) {\n          npkCache.add(npkKey);\n          generatedLogs.push({\n            title: `NPK Levels - N: ${device.nitrogen}, P: ${device.phosphorus || 'null'}, K: ${device.potassium}`,\n            timestamp: device.timestamp,\n          });\n        }\n      });\n    }\n\n    if (data.device_values?.valve_devices_data) {\n      data.device_values.valve_devices_data.forEach((valve) => {\n        const valveKey = `Valve_${valve.section_id}_${valve.valve_timestamp}`;\n        if (!valveCache.has(valveKey)) {\n          valveCache.add(valveKey);\n          generatedLogs.push({\n            title: `Valve Status for ${valve.section_name}: ${valve.valve_status} (Mode: ${valve.valve_mode})`,\n            timestamp: valve.valve_timestamp,\n          });\n        }\n      });\n    }\n\n    if (data.device_values?.moisture_device_value) {\n      data.device_values.moisture_device_value\n        .filter(moisture => moisture.moisture_value <= 30 || moisture.moisture_value >= 80)\n        .forEach((moisture) => {\n          const moistureKey = `Moisture_${moisture.section_id}_${moisture.timestamp}`;\n          if (!moistureCache.has(moistureKey)) {\n            moistureCache.add(moistureKey);\n            generatedLogs.push({\n              title: `Extreme Moisture for Section ${moisture.section_id}: ${moisture.moisture_value}%`,\n              timestamp: moisture.timestamp,\n            });\n          }\n        });\n    }\n\n    if (data.location_coordinates?.farm_coordinates) {\n      Promise.all(\n        data.location_coordinates.farm_coordinates.map(coord => fetchWeatherData(coord))\n      ).then(() => setLogs(generatedLogs));\n    } else {\n      setLogs(generatedLogs);\n    }\n  }, [data]);\n\n  return (\n    <div className='borderring p-3'>\n      <h5 className='text-secondary' style={{ fontSize: '14px' }}>Logs</h5>\n      <table className=\"table table-hover\">\n        <thead>\n          <tr>\n            <th style={{ fontSize: '0.875rem' }}>Title</th>\n            <th style={{ fontSize: '0.875rem' }}>Time Ago</th>\n          </tr>\n        </thead>\n        <tbody>\n          {logs.map((log, index) => (\n            <tr key={index}>\n              <td style={{ fontSize: '0.875rem' }}>{log.title}</td>\n              <td style={{ fontSize: '0.875rem' }}>{timeAgo(log.timestamp)}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default LogsGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}