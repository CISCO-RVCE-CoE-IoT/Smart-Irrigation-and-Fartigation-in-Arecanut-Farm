{"ast":null,"code":"var _jsxFileName = \"/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/logsGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Ensure Bootstrap is imported\n\n// OpenWeather API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = '8925502a781648f4443f9e01d96c7ff5';\nconst apiURL = 'https://api.openweathermap.org/data/2.5/weather?units=metric&lat=';\n\n// Helper function to format time ago\nconst timeAgo = timestamp => {\n  const now = new Date();\n  const diff = now - new Date(timestamp);\n  const minutes = Math.floor(diff / 1000 / 60);\n  const hours = Math.floor(diff / 1000 / 60 / 60);\n  const days = Math.floor(diff / 1000 / 60 / 60 / 24);\n  if (days > 0) return `${days} d${days > 1 ? 's' : ''} ago`;\n  if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n  return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n};\nconst LogsGenerator = ({\n  data\n}) => {\n  _s();\n  const [logs, setLogs] = useState([]);\n  const [weatherLogs, setWeatherLogs] = useState([]);\n  useEffect(() => {\n    const generatedLogs = [];\n\n    // Add logs for NPK values\n    data.device_values.farm_device_data.forEach(device => {\n      generatedLogs.push({\n        title: `NPK Values: Nitrogen: ${device.nitrogen}, Phosphorus: ${device.phosphorus}, Potassium: ${device.potassium}`,\n        timestamp: device.timestamp\n      });\n    });\n\n    // Add logs for moisture device values\n    data.device_values.moisture_device_value.forEach(moisture => {\n      generatedLogs.push({\n        title: `Moisture Value for Section ${moisture.section_id}: ${moisture.moisture_value}%`,\n        timestamp: moisture.timestamp\n      });\n    });\n\n    // Add logs for valve status\n    data.device_values.valve_devices_data.forEach(valve => {\n      generatedLogs.push({\n        title: `Valve Status for Section ${valve.section_name}: ${valve.valve_status} (Mode: ${valve.valve_mode})`,\n        timestamp: valve.valve_timestamp\n      });\n    });\n    setLogs(generatedLogs);\n\n    // Fetch weather prediction for each farm\n    data.farmer_farms.forEach(async farm => {\n      const [lat, lon] = farm.farm_location.split(',').map(coord => parseFloat(coord.trim()));\n      const weatherData = await fetch(`${apiURL}${lat}&lon=${lon}&appid=${apiKey}`).then(response => response.json()).catch(err => console.error(err));\n      if (weatherData) {\n        const weatherLog = {\n          title: `Weather Prediction for ${farm.farm_name}: ${weatherData.weather[0].description}, Temp: ${weatherData.main.temp}°C`,\n          timestamp: new Date().toISOString()\n        };\n        setWeatherLogs(prevLogs => [...prevLogs, weatherLog]);\n      }\n    });\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"borderring p-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"text-secondary\",\n      children: \"Logs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-hover\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Time Ago\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: log.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: timeAgo(log.timestamp)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)), weatherLogs.map((log, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: log.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: timeAgo(log.timestamp)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this)]\n        }, `weather-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(LogsGenerator, \"5gkywhNthrZTV3sHdDQdGjmoKYU=\");\n_c = LogsGenerator;\nexport default LogsGenerator;\nvar _c;\n$RefreshReg$(_c, \"LogsGenerator\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","apiKey","apiURL","timeAgo","timestamp","now","Date","diff","minutes","Math","floor","hours","days","LogsGenerator","data","_s","logs","setLogs","weatherLogs","setWeatherLogs","generatedLogs","device_values","farm_device_data","forEach","device","push","title","nitrogen","phosphorus","potassium","moisture_device_value","moisture","section_id","moisture_value","valve_devices_data","valve","section_name","valve_status","valve_mode","valve_timestamp","farmer_farms","farm","lat","lon","farm_location","split","map","coord","parseFloat","trim","weatherData","fetch","then","response","json","catch","err","console","error","weatherLog","farm_name","weather","description","main","temp","toISOString","prevLogs","className","children","fileName","_jsxFileName","lineNumber","columnNumber","log","index","_c","$RefreshReg$"],"sources":["/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/logsGenerator.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Ensure Bootstrap is imported\n\n// OpenWeather API\nconst apiKey = '8925502a781648f4443f9e01d96c7ff5';\nconst apiURL = 'https://api.openweathermap.org/data/2.5/weather?units=metric&lat=';\n\n// Helper function to format time ago\nconst timeAgo = (timestamp) => {\n  const now = new Date();\n  const diff = now - new Date(timestamp);\n  const minutes = Math.floor(diff / 1000 / 60);\n  const hours = Math.floor(diff / 1000 / 60 / 60);\n  const days = Math.floor(diff / 1000 / 60 / 60 / 24);\n\n  if (days > 0) return `${days} d${days > 1 ? 's' : ''} ago`;\n  if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n  return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\n};\n\nconst LogsGenerator = ({ data }) => {\n  const [logs, setLogs] = useState([]);\n  const [weatherLogs, setWeatherLogs] = useState([]);\n\n  useEffect(() => {\n    const generatedLogs = [];\n\n    // Add logs for NPK values\n    data.device_values.farm_device_data.forEach((device) => {\n      generatedLogs.push({\n        title: `NPK Values: Nitrogen: ${device.nitrogen}, Phosphorus: ${device.phosphorus}, Potassium: ${device.potassium}`,\n        timestamp: device.timestamp,\n      });\n    });\n\n    // Add logs for moisture device values\n    data.device_values.moisture_device_value.forEach((moisture) => {\n      generatedLogs.push({\n        title: `Moisture Value for Section ${moisture.section_id}: ${moisture.moisture_value}%`,\n        timestamp: moisture.timestamp,\n      });\n    });\n\n    // Add logs for valve status\n    data.device_values.valve_devices_data.forEach((valve) => {\n      generatedLogs.push({\n        title: `Valve Status for Section ${valve.section_name}: ${valve.valve_status} (Mode: ${valve.valve_mode})`,\n        timestamp: valve.valve_timestamp,\n      });\n    });\n\n    setLogs(generatedLogs);\n\n    // Fetch weather prediction for each farm\n    data.farmer_farms.forEach(async (farm) => {\n      const [lat, lon] = farm.farm_location.split(',').map(coord => parseFloat(coord.trim()));\n      const weatherData = await fetch(`${apiURL}${lat}&lon=${lon}&appid=${apiKey}`)\n        .then(response => response.json())\n        .catch(err => console.error(err));\n\n      if (weatherData) {\n        const weatherLog = {\n          title: `Weather Prediction for ${farm.farm_name}: ${weatherData.weather[0].description}, Temp: ${weatherData.main.temp}°C`,\n          timestamp: new Date().toISOString(),\n        };\n        setWeatherLogs(prevLogs => [...prevLogs, weatherLog]);\n      }\n    });\n  }, [data]);\n\n  return (\n    <div className='borderring p-3'>\n      <h5 className='text-secondary'>Logs</h5>\n      <table className=\"table table-hover\">\n        <thead>\n          <tr>\n            <th>Title</th>\n            <th>Time Ago</th>\n          </tr>\n        </thead>\n        <tbody>\n          {/* Render Logs from NPK, Moisture, and Valve status */}\n          {logs.map((log, index) => (\n            <tr key={index}>\n              <td>{log.title}</td>\n              <td>{timeAgo(log.timestamp)}</td>\n            </tr>\n          ))}\n          {/* Render Weather Logs */}\n          {weatherLogs.map((log, index) => (\n            <tr key={`weather-${index}`}>\n              <td>{log.title}</td>\n              <td>{timeAgo(log.timestamp)}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default LogsGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}