{"ast":null,"code":"var _jsxFileName = \"/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/logsGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Ensure Bootstrap is imported\n\n// OpenWeather API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = '8925502a781648f4443f9e01d96c7ff5';\nconst apiURL = 'https://api.openweathermap.org/data/2.5/weather?units=metric&lat=';\n\n// Helper function to format time ago\nconst timeAgo = timestamp => {\n  const now = new Date();\n  const diff = now - new Date(timestamp);\n  const minutes = Math.floor(diff / 1000 / 60);\n  const hours = Math.floor(diff / 1000 / 60 / 60);\n  const days = Math.floor(diff / 1000 / 60 / 60 / 24);\n  if (days > 0) return `${days} d${days > 1 ? 's' : ''} ago`;\n  if (hours > 0) return `${hours} hr${hours > 1 ? 's' : ''} ago`;\n  return `${minutes} min${minutes > 1 ? 's' : ''} ago`;\n};\nconst LogsGenerator = ({\n  data\n}) => {\n  _s();\n  const [logs, setLogs] = useState([]);\n  const [weatherLogs, setWeatherLogs] = useState(new Set());\n  const [extremeMoistureLogs, setExtremeMoistureLogs] = useState(new Set());\n  const [extremeWeatherLogs, setExtremeWeatherLogs] = useState(new Set());\n  useEffect(() => {\n    const generatedLogs = [];\n    const weatherDataCache = {}; // Cache for unique weather logs\n    const npkCache = new Set(); // Cache for unique NPK logs\n    const valveCache = new Set(); // Cache for unique valve status logs\n\n    // Process NPK values - ensure no repetition for each device\n    data.device_values.farm_device_data.forEach(device => {\n      const npkLog = {\n        title: `NPK Values: Nitrogen: ${device.nitrogen}, Phosphorus: ${device.phosphorus || 'N/A'}, Potassium: ${device.potassium}`,\n        timestamp: device.timestamp\n      };\n      if (!npkCache.has(JSON.stringify(npkLog))) {\n        generatedLogs.push(npkLog);\n        npkCache.add(JSON.stringify(npkLog)); // Add to the cache\n      }\n    });\n\n    // Process Valve status logs - ensure no repetition for each valve device\n    data.device_values.valve_devices_data.forEach(valve => {\n      const valveLog = {\n        title: `Valve Status for Section ${valve.section_name}: ${valve.valve_status} (Mode: ${valve.valve_mode})`,\n        timestamp: valve.valve_timestamp\n      };\n      if (!valveCache.has(JSON.stringify(valveLog))) {\n        generatedLogs.push(valveLog);\n        valveCache.add(JSON.stringify(valveLog)); // Add to the cache\n      }\n    });\n\n    // Process extreme moisture logs - ensure no repetition for each extreme moisture condition\n    const extremeMoisture = data.device_values.moisture_device_value.filter(moisture => {\n      return moisture.moisture_value <= 30 || moisture.moisture_value >= 80;\n    });\n    extremeMoisture.forEach(moisture => {\n      const extremeMoistureLog = {\n        title: `Extreme Moisture Value for Section ${moisture.section_id}: ${moisture.moisture_value}%`,\n        timestamp: moisture.timestamp\n      };\n      setExtremeMoistureLogs(prev => new Set(prev.add(JSON.stringify(extremeMoistureLog))));\n    });\n\n    // Process extreme weather logs - Hot or Cold\n    data.farmer_farms.forEach(async farm => {\n      const [lat, lon] = farm.farm_location.split(',').map(coord => parseFloat(coord.trim()));\n      const weatherData = await fetch(`${apiURL}${lat}&lon=${lon}&appid=${apiKey}`).then(response => response.json()).catch(err => console.error(err));\n      if (weatherData) {\n        const weatherLog = {\n          title: `Weather Prediction for ${farm.farm_name}: ${weatherData.weather[0].description}, Temp: ${weatherData.main.temp}°C`,\n          timestamp: new Date().toISOString()\n        };\n\n        // Check if this weather log has already been added\n        const cacheKey = `${farm.farm_name}_${weatherData.weather[0].description}_${weatherData.main.temp}`;\n        if (!weatherDataCache[cacheKey]) {\n          weatherDataCache[cacheKey] = true;\n          generatedLogs.push(weatherLog);\n\n          // Check for extreme weather conditions (Hot or Cold)\n          if (weatherData.main.temp > 35) {\n            const extremeHeatLog = {\n              title: `Extreme Heat for ${farm.farm_name}: Temp: ${weatherData.main.temp}°C`,\n              timestamp: weatherLog.timestamp\n            };\n            generatedLogs.push(extremeHeatLog);\n          } else if (weatherData.main.temp < 5) {\n            const extremeColdLog = {\n              title: `Extreme Cold for ${farm.farm_name}: Temp: ${weatherData.main.temp}°C`,\n              timestamp: weatherLog.timestamp\n            };\n            generatedLogs.push(extremeColdLog);\n          }\n        }\n      }\n    });\n    setLogs(generatedLogs);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"borderring p-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"text-secondary\",\n      style: {\n        fontSize: '14px'\n      },\n      children: \"Logs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-hover\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              fontSize: '0.875rem'\n            },\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              fontSize: '0.875rem'\n            },\n            children: \"Time Ago\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              fontSize: '0.875rem'\n            },\n            children: log.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              fontSize: '0.875rem'\n            },\n            children: timeAgo(log.timestamp)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)), [...extremeMoistureLogs].map((logStr, index) => {\n          const log = JSON.parse(logStr); // Convert back to object\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                fontSize: '0.875rem'\n              },\n              children: log.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                fontSize: '0.875rem'\n              },\n              children: timeAgo(log.timestamp)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this)]\n          }, `extreme-moisture-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this);\n        }), [...extremeWeatherLogs].map((logStr, index) => {\n          const log = JSON.parse(logStr); // Convert back to object\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                fontSize: '0.875rem'\n              },\n              children: log.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                fontSize: '0.875rem'\n              },\n              children: timeAgo(log.timestamp)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this)]\n          }, `extreme-weather-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this);\n        }), [...weatherLogs].map((logStr, index) => {\n          const log = JSON.parse(logStr); // Convert back to object\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                fontSize: '0.875rem'\n              },\n              children: log.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              style: {\n                fontSize: '0.875rem'\n              },\n              children: timeAgo(log.timestamp)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 17\n            }, this)]\n          }, `weather-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(LogsGenerator, \"RGSE1DE7r6xzSyf03mcMlRO7Brs=\");\n_c = LogsGenerator;\nexport default LogsGenerator;\nvar _c;\n$RefreshReg$(_c, \"LogsGenerator\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","apiKey","apiURL","timeAgo","timestamp","now","Date","diff","minutes","Math","floor","hours","days","LogsGenerator","data","_s","logs","setLogs","weatherLogs","setWeatherLogs","Set","extremeMoistureLogs","setExtremeMoistureLogs","extremeWeatherLogs","setExtremeWeatherLogs","generatedLogs","weatherDataCache","npkCache","valveCache","device_values","farm_device_data","forEach","device","npkLog","title","nitrogen","phosphorus","potassium","has","JSON","stringify","push","add","valve_devices_data","valve","valveLog","section_name","valve_status","valve_mode","valve_timestamp","extremeMoisture","moisture_device_value","filter","moisture","moisture_value","extremeMoistureLog","section_id","prev","farmer_farms","farm","lat","lon","farm_location","split","map","coord","parseFloat","trim","weatherData","fetch","then","response","json","catch","err","console","error","weatherLog","farm_name","weather","description","main","temp","toISOString","cacheKey","extremeHeatLog","extremeColdLog","className","children","style","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","log","index","logStr","parse","_c","$RefreshReg$"],"sources":["/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/logsGenerator.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Ensure Bootstrap is imported\n\n// OpenWeather API\nconst apiKey = '8925502a781648f4443f9e01d96c7ff5';\nconst apiURL = 'https://api.openweathermap.org/data/2.5/weather?units=metric&lat=';\n\n// Helper function to format time ago\nconst timeAgo = (timestamp) => {\n  const now = new Date();\n  const diff = now - new Date(timestamp);\n  const minutes = Math.floor(diff / 1000 / 60);\n  const hours = Math.floor(diff / 1000 / 60 / 60);\n  const days = Math.floor(diff / 1000 / 60 / 60 / 24);\n\n  if (days > 0) return `${days} d${days > 1 ? 's' : ''} ago`;\n  if (hours > 0) return `${hours} hr${hours > 1 ? 's' : ''} ago`;\n  return `${minutes} min${minutes > 1 ? 's' : ''} ago`;\n};\n\nconst LogsGenerator = ({ data }) => {\n  const [logs, setLogs] = useState([]);\n  const [weatherLogs, setWeatherLogs] = useState(new Set());\n  const [extremeMoistureLogs, setExtremeMoistureLogs] = useState(new Set());\n  const [extremeWeatherLogs, setExtremeWeatherLogs] = useState(new Set());\n\n  useEffect(() => {\n    const generatedLogs = [];\n    const weatherDataCache = {}; // Cache for unique weather logs\n    const npkCache = new Set(); // Cache for unique NPK logs\n    const valveCache = new Set(); // Cache for unique valve status logs\n  \n    // Process NPK values - ensure no repetition for each device\n    data.device_values.farm_device_data.forEach((device) => {\n      const npkLog = {\n        title: `NPK Values: Nitrogen: ${device.nitrogen}, Phosphorus: ${device.phosphorus || 'N/A'}, Potassium: ${device.potassium}`,\n        timestamp: device.timestamp,\n      };\n      if (!npkCache.has(JSON.stringify(npkLog))) {\n        generatedLogs.push(npkLog);\n        npkCache.add(JSON.stringify(npkLog)); // Add to the cache\n      }\n    });\n  \n    // Process Valve status logs - ensure no repetition for each valve device\n    data.device_values.valve_devices_data.forEach((valve) => {\n      const valveLog = {\n        title: `Valve Status for Section ${valve.section_name}: ${valve.valve_status} (Mode: ${valve.valve_mode})`,\n        timestamp: valve.valve_timestamp,\n      };\n      if (!valveCache.has(JSON.stringify(valveLog))) {\n        generatedLogs.push(valveLog);\n        valveCache.add(JSON.stringify(valveLog)); // Add to the cache\n      }\n    });\n  \n    // Process extreme moisture logs - ensure no repetition for each extreme moisture condition\n    const extremeMoisture = data.device_values.moisture_device_value.filter((moisture) => {\n      return moisture.moisture_value <= 30 || moisture.moisture_value >= 80;\n    });\n\n    extremeMoisture.forEach((moisture) => {\n      const extremeMoistureLog = {\n        title: `Extreme Moisture Value for Section ${moisture.section_id}: ${moisture.moisture_value}%`,\n        timestamp: moisture.timestamp,\n      };\n      setExtremeMoistureLogs((prev) => new Set(prev.add(JSON.stringify(extremeMoistureLog))));\n    });\n\n    // Process extreme weather logs - Hot or Cold\n    data.farmer_farms.forEach(async (farm) => {\n      const [lat, lon] = farm.farm_location.split(',').map(coord => parseFloat(coord.trim()));\n      const weatherData = await fetch(`${apiURL}${lat}&lon=${lon}&appid=${apiKey}`)\n        .then(response => response.json())\n        .catch(err => console.error(err));\n  \n      if (weatherData) {\n        const weatherLog = {\n          title: `Weather Prediction for ${farm.farm_name}: ${weatherData.weather[0].description}, Temp: ${weatherData.main.temp}°C`,\n          timestamp: new Date().toISOString(),\n        };\n  \n        // Check if this weather log has already been added\n        const cacheKey = `${farm.farm_name}_${weatherData.weather[0].description}_${weatherData.main.temp}`;\n        if (!weatherDataCache[cacheKey]) {\n          weatherDataCache[cacheKey] = true;\n          generatedLogs.push(weatherLog);\n  \n          // Check for extreme weather conditions (Hot or Cold)\n          if (weatherData.main.temp > 35) {\n            const extremeHeatLog = {\n              title: `Extreme Heat for ${farm.farm_name}: Temp: ${weatherData.main.temp}°C`,\n              timestamp: weatherLog.timestamp,\n            };\n            generatedLogs.push(extremeHeatLog);\n          } else if (weatherData.main.temp < 5) {\n            const extremeColdLog = {\n              title: `Extreme Cold for ${farm.farm_name}: Temp: ${weatherData.main.temp}°C`,\n              timestamp: weatherLog.timestamp,\n            };\n            generatedLogs.push(extremeColdLog);\n          }\n        }\n      }\n    });\n  \n    setLogs(generatedLogs);\n  }, [data]);\n\n  return (\n    <div className='borderring p-3'>\n      <h5 className='text-secondary' style={{ fontSize: '14px' }}>Logs</h5>\n      <table className=\"table table-hover\">\n        <thead>\n          <tr>\n            <th style={{ fontSize: '0.875rem' }}>Title</th>\n            <th style={{ fontSize: '0.875rem' }}>Time Ago</th>\n          </tr>\n        </thead>\n        <tbody>\n          {/* Render Logs from NPK and Valve status */}\n          {logs.map((log, index) => (\n            <tr key={index}>\n              <td style={{ fontSize: '0.875rem' }}>{log.title}</td>\n              <td style={{ fontSize: '0.875rem' }}>{timeAgo(log.timestamp)}</td>\n            </tr>\n          ))}\n          {/* Render Extreme Moisture Logs */}\n          {[...extremeMoistureLogs].map((logStr, index) => {\n            const log = JSON.parse(logStr); // Convert back to object\n            return (\n              <tr key={`extreme-moisture-${index}`}>\n                <td style={{ fontSize: '0.875rem' }}>{log.title}</td>\n                <td style={{ fontSize: '0.875rem' }}>{timeAgo(log.timestamp)}</td>\n              </tr>\n            );\n          })}\n          {/* Render Extreme Weather Logs */}\n          {[...extremeWeatherLogs].map((logStr, index) => {\n            const log = JSON.parse(logStr); // Convert back to object\n            return (\n              <tr key={`extreme-weather-${index}`}>\n                <td style={{ fontSize: '0.875rem' }}>{log.title}</td>\n                <td style={{ fontSize: '0.875rem' }}>{timeAgo(log.timestamp)}</td>\n              </tr>\n            );\n          })}\n          {/* Render Weather Logs */}\n          {[...weatherLogs].map((logStr, index) => {\n            const log = JSON.parse(logStr); // Convert back to object\n            return (\n              <tr key={`weather-${index}`}>\n                <td style={{ fontSize: '0.875rem' }}>{log.title}</td>\n                <td style={{ fontSize: '0.875rem' }}>{timeAgo(log.timestamp)}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default LogsGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}