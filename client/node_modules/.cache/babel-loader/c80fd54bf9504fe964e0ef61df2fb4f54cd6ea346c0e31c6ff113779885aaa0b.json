{"ast":null,"code":"var _jsxFileName = \"/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/logsGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Ensure Bootstrap is imported\n\n// OpenWeather API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = '8925502a781648f4443f9e01d96c7ff5';\nconst apiURL = 'https://api.openweathermap.org/data/2.5/weather?units=metric&lat=';\n\n// Helper function to format time ago\nconst timeAgo = timestamp => {\n  const now = new Date();\n  const diff = now - new Date(timestamp);\n  const minutes = Math.floor(diff / 1000 / 60);\n  const hours = Math.floor(diff / 1000 / 60 / 60);\n  const days = Math.floor(diff / 1000 / 60 / 60 / 24);\n  if (days > 0) return `${days} d${days > 1 ? 's' : ''} ago`;\n  if (hours > 0) return `${hours} hr${hours > 1 ? 's' : ''} ago`;\n  return `${minutes} min${minutes > 1 ? 's' : ''} ago`;\n};\nconst LogsGenerator = ({\n  data\n}) => {\n  _s();\n  const [logs, setLogs] = useState([]);\n  const [weatherLogs, setWeatherLogs] = useState(new Set()); // Use a Set to hold weather logs\n  const [extremeMoistureLogs, setExtremeMoistureLogs] = useState(new Set()); // Use a Set to hold extreme moisture logs\n  const [extremeWeatherLogs, setExtremeWeatherLogs] = useState(new Set()); // Use a Set to hold extreme weather logs\n\n  useEffect(() => {\n    const generatedLogs = [];\n\n    // Add logs for NPK values\n    data.device_values.farm_device_data.forEach(device => {\n      generatedLogs.push({\n        title: `NPK Values: Nitrogen: ${device.nitrogen}, Phosphorus: ${device.phosphorus}, Potassium: ${device.potassium}`,\n        timestamp: device.timestamp\n      });\n    });\n\n    // Add logs for valve status\n    data.device_values.valve_devices_data.forEach(valve => {\n      generatedLogs.push({\n        title: `Valve Status for Section ${valve.section_name}: ${valve.valve_status} (Mode: ${valve.valve_mode})`,\n        timestamp: valve.valve_timestamp\n      });\n    });\n    setLogs(generatedLogs);\n\n    // Check for extreme moisture values (low and high)\n    const extremeMoisture = data.device_values.moisture_device_value.filter(moisture => {\n      return moisture.moisture_value <= 30 || moisture.moisture_value >= 80; // Extreme moisture values: Low (<30%) or High (>80%)\n    });\n\n    // Create logs for extreme moisture values and store them in a Set\n    extremeMoisture.forEach(moisture => {\n      const moistureLog = {\n        title: `Moisture Value for Section ${moisture.section_id}: ${moisture.moisture_value}%`,\n        timestamp: moisture.timestamp\n      };\n      setExtremeMoistureLogs(prevLogs => new Set(prevLogs.add(JSON.stringify(moistureLog)))); // Convert object to string to ensure uniqueness\n    });\n\n    // Fetch weather prediction for each farm\n    const weatherDataCache = {}; // Cache to avoid duplicate entries\n\n    data.farmer_farms.forEach(async farm => {\n      const [lat, lon] = farm.farm_location.split(',').map(coord => parseFloat(coord.trim()));\n      const weatherData = await fetch(`${apiURL}${lat}&lon=${lon}&appid=${apiKey}`).then(response => response.json()).catch(err => console.error(err));\n      if (weatherData) {\n        const weatherLog = {\n          title: `Weather Prediction for ${farm.farm_name}: ${weatherData.weather[0].description}, Temp: ${weatherData.main.temp}°C`,\n          timestamp: new Date().toISOString()\n        };\n\n        // Check if this weather data has already been added\n        const cacheKey = `${farm.farm_name}_${weatherData.weather[0].description}_${weatherData.main.temp}`;\n        if (!weatherDataCache[cacheKey]) {\n          weatherDataCache[cacheKey] = true;\n          setWeatherLogs(prevLogs => new Set(prevLogs.add(JSON.stringify(weatherLog)))); // Ensure uniqueness by stringifying\n\n          // Check for extreme weather conditions (hot and cold)\n          if (weatherData.main.temp > 35) {\n            // Hot weather (above 35°C)\n            const extremeHeatLog = {\n              title: `Extreme Heat for ${farm.farm_name}: Temp: ${weatherData.main.temp}°C`,\n              timestamp: weatherLog.timestamp\n            };\n            setExtremeWeatherLogs(prevLogs => new Set(prevLogs.add(JSON.stringify(extremeHeatLog)))); // Add to Set\n          } else if (weatherData.main.temp < 5) {\n            // Cold weather (below 5°C)\n            const extremeColdLog = {\n              title: `Extreme Cold for ${farm.farm_name}: Temp: ${weatherData.main.temp}°C`,\n              timestamp: weatherLog.timestamp\n            };\n            setExtremeWeatherLogs(prevLogs => new Set(prevLogs.add(JSON.stringify(extremeColdLog)))); // Add to Set\n          }\n        }\n      }\n    });\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"borderring p-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"text-secondary fs-5 fs-md-3 fs-lg-2\",\n      children: \"Logs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-hover\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"fs-6 fs-md-5 fs-lg-4\",\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"fs-6 fs-md-5 fs-lg-4\",\n            children: \"Time Ago\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"fs-6 fs-md-5 fs-lg-4\",\n            children: log.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"fs-6 fs-md-5 fs-lg-4\",\n            children: timeAgo(log.timestamp)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)), [...extremeMoistureLogs].map((logStr, index) => {\n          const log = JSON.parse(logStr); // Convert back to object\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"fs-6 fs-md-5 fs-lg-4\",\n              children: log.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"fs-6 fs-md-5 fs-lg-4\",\n              children: timeAgo(log.timestamp)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this)]\n          }, `extreme-moisture-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this);\n        }), [...extremeWeatherLogs].map((logStr, index) => {\n          const log = JSON.parse(logStr); // Convert back to object\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"fs-6 fs-md-5 fs-lg-4\",\n              children: log.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"fs-6 fs-md-5 fs-lg-4\",\n              children: timeAgo(log.timestamp)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this)]\n          }, `extreme-weather-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this);\n        }), [...weatherLogs].map((logStr, index) => {\n          const log = JSON.parse(logStr); // Convert back to object\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"fs-6 fs-md-5 fs-lg-4\",\n              children: log.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"fs-6 fs-md-5 fs-lg-4\",\n              children: timeAgo(log.timestamp)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 17\n            }, this)]\n          }, `weather-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(LogsGenerator, \"RGSE1DE7r6xzSyf03mcMlRO7Brs=\");\n_c = LogsGenerator;\nexport default LogsGenerator;\nvar _c;\n$RefreshReg$(_c, \"LogsGenerator\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","apiKey","apiURL","timeAgo","timestamp","now","Date","diff","minutes","Math","floor","hours","days","LogsGenerator","data","_s","logs","setLogs","weatherLogs","setWeatherLogs","Set","extremeMoistureLogs","setExtremeMoistureLogs","extremeWeatherLogs","setExtremeWeatherLogs","generatedLogs","device_values","farm_device_data","forEach","device","push","title","nitrogen","phosphorus","potassium","valve_devices_data","valve","section_name","valve_status","valve_mode","valve_timestamp","extremeMoisture","moisture_device_value","filter","moisture","moisture_value","moistureLog","section_id","prevLogs","add","JSON","stringify","weatherDataCache","farmer_farms","farm","lat","lon","farm_location","split","map","coord","parseFloat","trim","weatherData","fetch","then","response","json","catch","err","console","error","weatherLog","farm_name","weather","description","main","temp","toISOString","cacheKey","extremeHeatLog","extremeColdLog","className","children","fileName","_jsxFileName","lineNumber","columnNumber","log","index","logStr","parse","_c","$RefreshReg$"],"sources":["/home/mcalab3/Desktop/contributor/Smart-Irrigation-and-Fartigation-in-Arecanut-Farm/client/src/pages/User/Components/Farmer/logsGenerator.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Ensure Bootstrap is imported\n\n// OpenWeather API\nconst apiKey = '8925502a781648f4443f9e01d96c7ff5';\nconst apiURL = 'https://api.openweathermap.org/data/2.5/weather?units=metric&lat=';\n\n// Helper function to format time ago\nconst timeAgo = (timestamp) => {\n  const now = new Date();\n  const diff = now - new Date(timestamp);\n  const minutes = Math.floor(diff / 1000 / 60);\n  const hours = Math.floor(diff / 1000 / 60 / 60);\n  const days = Math.floor(diff / 1000 / 60 / 60 / 24);\n\n  if (days > 0) return `${days} d${days > 1 ? 's' : ''} ago`;\n  if (hours > 0) return `${hours} hr${hours > 1 ? 's' : ''} ago`;\n  return `${minutes} min${minutes > 1 ? 's' : ''} ago`;\n};\n\nconst LogsGenerator = ({ data }) => {\n  const [logs, setLogs] = useState([]);\n  const [weatherLogs, setWeatherLogs] = useState(new Set()); // Use a Set to hold weather logs\n  const [extremeMoistureLogs, setExtremeMoistureLogs] = useState(new Set()); // Use a Set to hold extreme moisture logs\n  const [extremeWeatherLogs, setExtremeWeatherLogs] = useState(new Set()); // Use a Set to hold extreme weather logs\n\n  useEffect(() => {\n    const generatedLogs = [];\n\n    // Add logs for NPK values\n    data.device_values.farm_device_data.forEach((device) => {\n      generatedLogs.push({\n        title: `NPK Values: Nitrogen: ${device.nitrogen}, Phosphorus: ${device.phosphorus}, Potassium: ${device.potassium}`,\n        timestamp: device.timestamp,\n      });\n    });\n\n    // Add logs for valve status\n    data.device_values.valve_devices_data.forEach((valve) => {\n      generatedLogs.push({\n        title: `Valve Status for Section ${valve.section_name}: ${valve.valve_status} (Mode: ${valve.valve_mode})`,\n        timestamp: valve.valve_timestamp,\n      });\n    });\n\n    setLogs(generatedLogs);\n\n    // Check for extreme moisture values (low and high)\n    const extremeMoisture = data.device_values.moisture_device_value.filter((moisture) => {\n      return moisture.moisture_value <= 30 || moisture.moisture_value >= 80; // Extreme moisture values: Low (<30%) or High (>80%)\n    });\n\n    // Create logs for extreme moisture values and store them in a Set\n    extremeMoisture.forEach((moisture) => {\n      const moistureLog = {\n        title: `Moisture Value for Section ${moisture.section_id}: ${moisture.moisture_value}%`,\n        timestamp: moisture.timestamp,\n      };\n      setExtremeMoistureLogs((prevLogs) => new Set(prevLogs.add(JSON.stringify(moistureLog)))); // Convert object to string to ensure uniqueness\n    });\n\n    // Fetch weather prediction for each farm\n    const weatherDataCache = {}; // Cache to avoid duplicate entries\n\n    data.farmer_farms.forEach(async (farm) => {\n      const [lat, lon] = farm.farm_location.split(',').map(coord => parseFloat(coord.trim()));\n      const weatherData = await fetch(`${apiURL}${lat}&lon=${lon}&appid=${apiKey}`)\n        .then(response => response.json())\n        .catch(err => console.error(err));\n\n      if (weatherData) {\n        const weatherLog = {\n          title: `Weather Prediction for ${farm.farm_name}: ${weatherData.weather[0].description}, Temp: ${weatherData.main.temp}°C`,\n          timestamp: new Date().toISOString(),\n        };\n\n        // Check if this weather data has already been added\n        const cacheKey = `${farm.farm_name}_${weatherData.weather[0].description}_${weatherData.main.temp}`;\n        if (!weatherDataCache[cacheKey]) {\n          weatherDataCache[cacheKey] = true;\n          setWeatherLogs((prevLogs) => new Set(prevLogs.add(JSON.stringify(weatherLog)))); // Ensure uniqueness by stringifying\n          \n          // Check for extreme weather conditions (hot and cold)\n          if (weatherData.main.temp > 35) { // Hot weather (above 35°C)\n            const extremeHeatLog = {\n              title: `Extreme Heat for ${farm.farm_name}: Temp: ${weatherData.main.temp}°C`,\n              timestamp: weatherLog.timestamp,\n            };\n            setExtremeWeatherLogs((prevLogs) => new Set(prevLogs.add(JSON.stringify(extremeHeatLog)))); // Add to Set\n          } else if (weatherData.main.temp < 5) { // Cold weather (below 5°C)\n            const extremeColdLog = {\n              title: `Extreme Cold for ${farm.farm_name}: Temp: ${weatherData.main.temp}°C`,\n              timestamp: weatherLog.timestamp,\n            };\n            setExtremeWeatherLogs((prevLogs) => new Set(prevLogs.add(JSON.stringify(extremeColdLog)))); // Add to Set\n          }\n        }\n      }\n    });\n  }, [data]);\n\n  return (\n    <div className='borderring p-3'>\n      <h5 className='text-secondary fs-5 fs-md-3 fs-lg-2'>Logs</h5>\n      <table className=\"table table-hover\">\n        <thead>\n          <tr>\n            <th className=\"fs-6 fs-md-5 fs-lg-4\">Title</th>\n            <th className=\"fs-6 fs-md-5 fs-lg-4\">Time Ago</th>\n          </tr>\n        </thead>\n        <tbody>\n          {/* Render Logs from NPK and Valve status */}\n          {logs.map((log, index) => (\n            <tr key={index}>\n              <td className=\"fs-6 fs-md-5 fs-lg-4\">{log.title}</td>\n              <td className=\"fs-6 fs-md-5 fs-lg-4\">{timeAgo(log.timestamp)}</td>\n            </tr>\n          ))}\n          {/* Render Extreme Moisture Logs (Low or High Moisture) */}\n          {[...extremeMoistureLogs].map((logStr, index) => {\n            const log = JSON.parse(logStr); // Convert back to object\n            return (\n              <tr key={`extreme-moisture-${index}`}>\n                <td className=\"fs-6 fs-md-5 fs-lg-4\">{log.title}</td>\n                <td className=\"fs-6 fs-md-5 fs-lg-4\">{timeAgo(log.timestamp)}</td>\n              </tr>\n            );\n          })}\n          {/* Render Extreme Weather Logs (Hot or Cold Weather) */}\n          {[...extremeWeatherLogs].map((logStr, index) => {\n            const log = JSON.parse(logStr); // Convert back to object\n            return (\n              <tr key={`extreme-weather-${index}`}>\n                <td className=\"fs-6 fs-md-5 fs-lg-4\">{log.title}</td>\n                <td className=\"fs-6 fs-md-5 fs-lg-4\">{timeAgo(log.timestamp)}</td>\n              </tr>\n            );\n          })}\n          {/* Render Weather Logs */}\n          {[...weatherLogs].map((logStr, index) => {\n            const log = JSON.parse(logStr); // Convert back to object\n            return (\n              <tr key={`weather-${index}`}>\n                <td className=\"fs-6 fs-md-5 fs-lg-4\">{log.title}</td>\n                <td className=\"fs-6 fs-md-5 fs-lg-4\">{timeAgo(log.timestamp)}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default LogsGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}